openapi: 3.0.0
info:
  title: Arcane City
  version: 1.0.0
  description: REST API for working with Arcane City data
  contact:
    name: Geoff Maddock
    email: geoff.maddock@gmail.com
servers:
  - url: https://arcane.city
    description: Production
  - url: https://stage.arcane.city
    description: Stage
  - url: https://dev.arcane.city
    description: Development
components:
  responses:
    NotFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    Unexpected:
      description: Unexpected
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
  schemas:
    EntityId:
      description: The unique identifier of an entity
      type: integer
      readOnly: true
      example: 1
    EntitySimple:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/EntityId"
          example: 1000
        name:
          type: string
          maxLength: 255
          description: The cannonical name of the enitity
          example: Brillobox
        slug:
          type: string
          maxLength: 255
          description: A unique identifier name for the entity in kebab-case
          example: brillobox-bar
    EntityRequest:
      type: object
      required:
        - name
        - slug
      properties:
        name:
          type: string
          maxLength: 255
          description: The cannonical name of the enitity
          example: Brillobox
        slug:
          type: string
          maxLength: 255
          description: A unique identifier name for the entity in kebab-case
          example: brillobox-bar
        short:
          type: string
          maxLength: 255
          description: A brief description of the enitity
          example: A two level bar and venue
        description:
          type: string
          maxLength: 65535
          description: Full description of the entity
          example: A two level bar and venue that specializes in indie music and vegetarian food
        entity_type_id:
          $ref: "#/components/schemas/EntityTypeId"
          example: 1
          description: Relation to the entity type table that defines the type of an entity
        entity_status_id:
          $ref: "#/components/schemas/EntityStatusId"
          example: 1
          description: Relation to the entity status table that defines the status of an entity
        created_by:
          $ref: "#/components/schemas/UserId"
          example: 1
          description: Relation to the user table that defines the user who created an entity
        updated_by:
          $ref: "#/components/schemas/UserId"
          example: 1
          description: Relation to the user table that defines the user who last updated an entity
        created_at:
          $ref: "#/components/schemas/DateTime"
          description: Date and time that the entity was created
        updated_at:
          $ref: "#/components/schemas/DateTime"
          description: Date and time that the entity was last updated
        started_at:
          $ref: "#/components/schemas/DateTime"
          description: Date and time that the entity started to exist
        facebook_username:
          type: string
          maxLength: 64
          description: The entity's username on facebook
          example: johnsmith
        twitter_username:
          type: string
          maxLength: 64
          description: The entity's username on twitter
          example: johnsmith
    EntityResponse:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/EntityId"
          example: 1000
        name:
          type: string
          maxLength: 255
          description: The cannonical name of the enitity
          example: Brillobox
        slug:
          type: string
          maxLength: 255
          description: A unique identifier name for the entity in kebab-case
          example: brillobox-bar
        short:
          type: string
          maxLength: 255
          description: A brief description of the enitity
          example: A two level bar and venue
        description:
          type: string
          maxLength: 65535
          description: Full description of the entity
          example: A two level bar and venue that specializes in indie music and vegetarian food
        entity_type:
          $ref: "#/components/schemas/EntityType"
          example:
            { id: 1, name: Group, slug: group, short: a multi member entity }
          description: The entity type object that relates to an entity
        entity_status:
          $ref: "#/components/schemas/EntityStatus"
          example: { id: 1, name: Active }
          description: The entity status object that relates to an entity
        created_by:
          $ref: "#/components/schemas/UserSimple"
          description: The related user who created the entity
        updated_by:
          $ref: "#/components/schemas/UserSimple"
          description: The related user who updated the entity
        created_at:
          $ref: "#/components/schemas/DateTime"
          description: Date and time that the entity was created
        updated_at:
          $ref: "#/components/schemas/DateTime"
          description: Date and time that the entity was last updated
        started_at:
          $ref: "#/components/schemas/DateTime"
          description: Date and time that the entity started to exist
        facebook_username:
          type: string
          maxLength: 64
          description: The entity's username on facebook
          example: johnsmith
        twitter_username:
          type: string
          maxLength: 64
          description: The entity's username on twitter
          example: johnsmith
        links:
          type: array
          items: { "$ref": "#/components/schemas/Link" }
    Entities:
      allOf: [$ref: "#/components/schemas/Pagination"]
      type: object
      properties:
        data:
          type: array
          description: List of the current page of entities
          items:
            "$ref": "#/components/schemas/EntityResponse"
    EntityTypeId:
      description: The unique identifier of an entity type
      type: integer
      readOnly: true
      example: 1
    EntityType:
      type: object
      required:
        - name
      properties:
        id:
          $ref: "#/components/schemas/EntityTypeId"
          example: 1
        name:
          type: string
          maxLength: 255
          description: A name of an entity type
          example: Group
        slug:
          type: string
          maxLength: 255
          description: A unique identifier name for the entity type in kebab-case
          example: group-slug
        short:
          type: string
          example: A multi-member entity
          description: A brief description of the entity type
          maxLength: 255
        created_at:
          $ref: "#/components/schemas/DateTime"
          description: Date and time that the entity type was created
          readOnly: true
        updated_at:
          $ref: "#/components/schemas/DateTime"
          description: Date and time that the entity type was last updated
          readOnly: true
    EntityStatusId:
      description: The unique identifier of an entity type
      type: integer
      readOnly: true
      example: 1
    EntityStatus:
      type: object
      required:
        - name
      properties:
        id:
          $ref: "#/components/schemas/EntityStatusId"
          example: 1
        name:
          type: string
          maxLength: 255
          description: A name of an entity status
          example: Active
        created_at:
          $ref: "#/components/schemas/DateTime"
          description: Date and time that the entity status was created
          readOnly: true
        updated_at:
          $ref: "#/components/schemas/DateTime"
          description: Date and time that the entity status was last updated
          readOnly: true
    EventId:
      description: The unique identifier of an event
      type: integer
      readOnly: true
      example: 1
    EventRequest:
      type: object
      required:
        - id
        - name
        - slug
        - start_at
      properties:
        id:
          $ref: "#/components/schemas/EventId"
          example: 1000
        name:
          type: string
          example: October's Lazercrunk at the Brillobox
          description: The cannonical name of the event
          maxLength: 255
        slug:
          type: string
          maxLength: 255
          description: A unique identifier name for the event in kebab-case
          example: octobers-lazercrunk-at-the-brillobox
        short:
          type: string
          example: a really fun dj night featuring performers from around the world
          description: A brief description of the event
          maxLength: 255
        visibility_id:
          $ref: "#/components/schemas/VisibilityId"
          example: 1
          description: Relation to the visibility table that defines the visibility of events
        description:
          type: string
          description: Full description of the event
          example: a really fun dj night featuring performers from around the world and locally playing new electronic music
          maxLength: 65535
        event_status_id:
          $ref: "#/components/schemas/EventStatusId"
          example: 1
          description: Relation to the event type table that defines the status of the event
        event_type_id:
          $ref: "#/components/schemas/EventTypeId"
          example: 1
          description: Relation to the event type table that defines the type of event
        promoter_id:
          $ref: "#/components/schemas/EntityId"
          example: 1
          description: Relation to the entity table that defines the promoter of the event
        venue_id:
          $ref: "#/components/schemas/EntityId"
          example: 1
          description: Relation to the entity table that defines the venue for the event
        is_benefit:
          type: boolean
          description: Flag indicating if the event is a benefit
          example: true
        attending:
          description: The number of users who marked that they are attending the event
          type: integer
          example: 10
        like:
          description: The number of users who marked that they like the event
          type: integer
          example: 10
        presale_price:
          description: The price for a presale price for the event
          type: number
          example: 9.99
        door_price:
          description: The price of the show at the door
          type: number
          example: 19.99
        soundcheck_at:
          $ref: "#/components/schemas/DateTime"
          description: Date and time that the event soundcheck is scheduled
        door_at:
          $ref: "#/components/schemas/DateTime"
          description: Date and time that the event doors are scheduled to open
        start_at:
          $ref: "#/components/schemas/DateTime"
          description: Date and time that the event starts
        end_at:
          $ref: "#/components/schemas/DateTime"
          description: Date and time that the event starts
        series_id:
          $ref: "#/components/schemas/SeriesId"
          example: 1
          description: Relation to the series table that defines the series for the event
        min_age:
          description: The minimum age requirement for the event in years
          type: integer
          example: 21
        primary_link:
          type: string
          description: The primary URL related to this event
          example: http://lazercrunk.com/october-2022
          maxLength: 255
        ticket_link:
          type: string
          description: The URL for buying a ticket to the event
          example: http://lazercrunk.com/october-2022/tickets
          maxLength: 255
        created_at:
          $ref: "#/components/schemas/DateTime"
          description: Date and time that the event was created
        updated_at:
          $ref: "#/components/schemas/DateTime"
          description: Date and time that the event was last updated
        cancelled_at:
          $ref: "#/components/schemas/DateTime"
          description: Date and time that the event was cancelled
        created_by:
          $ref: "#/components/schemas/UserId"
          example: 1
          description: Relation to the user table that defines the user who created the event
        updated_by:
          $ref: "#/components/schemas/UserId"
          example: 1
          description: Relation to the user table that defines the user who last updated the event
    Event:
      type: object
      required:
        - id
        - name
        - slug
      properties:
        id:
          $ref: "#/components/schemas/EventId"
          example: 1000
        name:
          type: string
          example: October's Lazercrunk at the Brillobox
          description: The cannonical name of the event
          maxLength: 255
        slug:
          type: string
          maxLength: 255
          description: A unique identifier name for the event in kebab-case
          example: octobers-lazercrunk-at-the-brillobox
        short:
          type: string
          example: a really fun dj night featuring performers from around the world
          description: A brief description of the event
          maxLength: 255
        visibility_id:
          $ref: "#/components/schemas/VisibilityId"
          example: 1
          description: Relation to the visibility table that defines the visibility of events
        description:
          type: string
          description: Full description of the event
          example: a really fun dj night featuring performers from around the world and locally playing new electronic music
          maxLength: 65535
        event_status_id:
          $ref: "#/components/schemas/EventStatusId"
          example: 1
          description: Relation to the event type table that defines the status of the event
        event_type_id:
          $ref: "#/components/schemas/EventTypeId"
          example: 1
          description: Relation to the event type table that defines the type of event
        promoter_id:
          $ref: "#/components/schemas/EntityId"
          example: 1
          description: Relation to the entity table that defines the promoter of the event
        venue_id:
          $ref: "#/components/schemas/EntityId"
          example: 1
          description: Relation to the entity table that defines the venue for the event
        is_benefit:
          type: boolean
          description: Flag indicating if the event is a benefit
          example: true
        attending:
          description: The number of users who marked that they are attending the event
          type: integer
          example: 10
        like:
          description: The number of users who marked that they like the event
          type: integer
          example: 10
        presale_price:
          description: The price for a presale price for the event
          type: number
          example: 9.99
        door_price:
          description: The price of the show at the door
          type: number
          example: 19.99
        soundcheck_at:
          $ref: "#/components/schemas/DateTime"
          description: Date and time that the event soundcheck is scheduled
        door_at:
          $ref: "#/components/schemas/DateTime"
          description: Date and time that the event doors are scheduled to open
        start_at:
          $ref: "#/components/schemas/DateTime"
          description: Date and time that the event starts
        end_at:
          $ref: "#/components/schemas/DateTime"
          description: Date and time that the event starts
        series_id:
          $ref: "#/components/schemas/SeriesId"
          example: 1
          description: Relation to the series table that defines the series for the event
        min_age:
          description: The minimum age requirement for the event in years
          type: integer
          example: 21
        primary_link:
          type: string
          description: The primary URL related to this event
          example: http://lazercrunk.com/october-2022
          maxLength: 255
        ticket_link:
          type: string
          description: The URL for buying a ticket to the event
          example: http://lazercrunk.com/october-2022/tickets
          maxLength: 255
        created_at:
          $ref: "#/components/schemas/DateTime"
          description: Date and time that the event was created
        updated_at:
          $ref: "#/components/schemas/DateTime"
          description: Date and time that the event was last updated
        cancelled_at:
          $ref: "#/components/schemas/DateTime"
          description: Date and time that the event was cancelled
        created_by:
          $ref: "#/components/schemas/UserId"
          example: 1
          description: Relation to the user table that defines the user who created the event
        updated_by:
          $ref: "#/components/schemas/UserId"
          example: 1
          description: Relation to the user table that defines the user who last updated the event
    EventResponse:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/EventId"
          example: 1000
        name:
          type: string
          example: October's Lazercrunk at the Brillobox
          description: The cannonical name of the event
          maxLength: 255
        slug:
          type: string
          maxLength: 255
          description: A unique identifier name for the event in kebab-case
          example: octobers-lazercrunk-at-the-brillobox
        short:
          type: string
          example: a really fun dj night featuring performers from around the world
          description: A brief description of the event
          maxLength: 255
        visibility:
          $ref: "#/components/schemas/Visibility"
          example: { id: 1, name: Public }
          description: Relation to the visibility table that defines the visibility of events
        description:
          type: string
          description: Full description of the event
          example: a really fun dj night featuring performers from around the world and locally playing new electronic music
          maxLength: 65535
        event_status:
          $ref: "#/components/schemas/EventStatus"
          description: Relation to the event status table that defines the event type of event
        event_type:
          $ref: "#/components/schemas/EventType"
          description: Relation to the event type table that defines the event type of event
        promoter:
          $ref: "#/components/schemas/EntityResponse"
          description: Relation to the entity table that defines the promoter for the event
        venue:
          $ref: "#/components/schemas/EntityResponse"
          description: Relation to the entity table that defines the venue for the event
        is_benefit:
          type: boolean
          description: Flag indicating if the event is a benefit
          example: true
        attending:
          description: The number of users who marked that they are attending the event
          type: integer
          example: 10
        like:
          description: The number of users who marked that they like the event
          type: integer
          example: 10
        presale_price:
          description: The price for a presale price for the event
          type: number
          example: 9.99
        door_price:
          description: The price of the show at the door
          type: number
          example: 19.99
        soundcheck_at:
          $ref: "#/components/schemas/DateTime"
          description: Date and time that the event soundcheck is scheduled
        door_at:
          $ref: "#/components/schemas/DateTime"
          description: Date and time that the event doors are scheduled to open
        start_at:
          $ref: "#/components/schemas/DateTime"
          description: Date and time that the event starts
        end_at:
          $ref: "#/components/schemas/DateTime"
          description: Date and time that the event starts
        series:
          $ref: "#/components/schemas/SeriesResponse"
          description: Relation to the series table that defines the series for the event
        min_age:
          description: The minimum age requirement for the event in years
          type: integer
          example: 21
        primary_link:
          type: string
          description: The primary URL related to this event
          example: http://lazercrunk.com/october-2022
          maxLength: 255
        ticket_link:
          type: string
          description: The URL for buying a ticket to the event
          example: http://lazercrunk.com/october-2022/tickets
          maxLength: 255
        created_at:
          $ref: "#/components/schemas/DateTime"
          description: Date and time that the event was created
        updated_at:
          $ref: "#/components/schemas/DateTime"
          description: Date and time that the event was last updated
        cancelled_at:
          $ref: "#/components/schemas/DateTime"
          description: Date and time that the event was cancelled
        created_by:
          $ref: "#/components/schemas/UserSimple"
          description: The related user who created the entity
        updated_by:
          $ref: "#/components/schemas/UserSimple"
          description: The related user who updated the entity
    Events:
      allOf: [$ref: "#/components/schemas/Pagination"]
      type: object
      properties:
        data:
          type: array
          description: List of the current page of events
          items:
            "$ref": "#/components/schemas/EventResponse"
    EventStatusId:
      description: The unique identifier of an event status
      type: integer
      readOnly: true
      example: 1
    EventStatus:
      type: object
      required:
        - name
      properties:
        id:
          $ref: "#/components/schemas/EventStatusId"
          example: 1
        name:
          type: string
          maxLength: 255
          description: A name of an event status
          example: Active
        created_at:
          $ref: "#/components/schemas/DateTime"
          description: Date and time that the event status was created
          readOnly: true
        updated_at:
          $ref: "#/components/schemas/DateTime"
          description: Date and time that the event status was last updated
          readOnly: true
    EventStatuses:
      allOf: # Combines the BasicErrorModel and the inline model
        - $ref: "#/components/schemas/Pagination"
        - type: object
          properties:
            data:
              type: array
              items: { "$ref": "#/components/schemas/EventStatus" }
    EventTypeId:
      description: The unique identifier of an event type
      type: integer
      readOnly: true
      example: 1
    EventType:
      type: object
      required:
        - name
      properties:
        id:
          $ref: "#/components/schemas/EventTypeId"
          example: 1
        name:
          type: string
          maxLength: 255
          description: A name of an event type
          example: Concert
        created_at:
          $ref: "#/components/schemas/DateTime"
          description: Date and time that the event type  was created
          readOnly: true
        updated_at:
          $ref: "#/components/schemas/DateTime"
          description: Date and time that the event type was last updated
          readOnly: true
    EventTypes:
      allOf: # Combines the BasicErrorModel and the inline model
        - $ref: "#/components/schemas/Pagination"
        - type: object
          properties:
            data:
              type: array
              items: { "$ref": "#/components/schemas/EventType" }
    LinkId:
      description: The unique identifier of a link
      type: integer
      readOnly: true
      example: 1
    Link:
      type: object
      required:
        - name
      properties:
        id:
          $ref: "#/components/schemas/LinkId"
          example: 1
        title:
          type: string
          maxLength: 255
          description: The title attribute set on the link
          example: This is the lazercrunk website.
        text:
          type: string
          maxLength: 255
          description: The display text for the link
          example: Lazercrunk Website
        url:
          type: string
          maxLength: 255
          description: A url representing a link
          example: https://lazercrunk.com
        is_primary:
          type: boolean
          description: Flag indicating that the link is primary for it's related entity
          example: true
        created_at:
          $ref: "#/components/schemas/DateTime"
          description: Date and time that the entity type was created
          readOnly: true
        updated_at:
          $ref: "#/components/schemas/DateTime"
          description: Date and time that the entity type was last updated
          readOnly: true
    Links:
      allOf: # Combines the BasicErrorModel and the inline model
        - $ref: "#/components/schemas/Pagination"
        - type: object
          properties:
            data:
              type: array
              items: { "$ref": "#/components/schemas/Link" }
    LocationId:
      description: The unique identifier of a location
      type: integer
      example: 1
    Location:
      type: object
      required:
        - name
      properties:
        id:
          $ref: "#/components/schemas/LocationId"
          example: 1
        name:
          type: string
          maxLength: 255
          description: The name of the location
          example: Brillobox
        slug:
          type: string
          maxLength: 255
          description: A unique identifier name for the series in kebab-case
          example: brillobox-bar
        address_line_one:
          type: string
          maxLength: 255
          description: First line of the address
          example: 100 East Street
        address_line_two:
          type: string
          maxLength: 255
          description: Second line of the address
          example: Suite 9000
        neighborhood:
          type: string
          maxLength: 255
          description: Neighborhood the location is in
          example: Bloomfield
        city:
          type: string
          maxLength: 255
          description: City of the location
          example: Pittsburgh
        state:
          type: string
          maxLength: 5
          description: State of the location
          example: Pittsburgh
        postal_code:
          type: string
          maxLength: 15
          description: Postal code of the location
          example: 15224
        country:
          type: string
          maxLength: 64
          description: Country of the location
          example: USA
        latitude:
          type: number
          description: Latitude of the location
          example: 0.00000000
        longitude:
          type: number
          description: longitude of the location
          example: 0.00000000
        visibility:
          $ref: "#/components/schemas/Visibility"
          example: { id: 1, name: Public }
          description: Relation to the visibility table that defines the visibility of location
        map_url:
          type: string
          maxLength: 128
          description: URL of the map location
          example: USA
        created_at:
          $ref: "#/components/schemas/DateTime"
          description: Date and time that the entity type was created
          readOnly: true
        updated_at:
          $ref: "#/components/schemas/DateTime"
          description: Date and time that the entity type was last updated
          readOnly: true
    Locations:
      allOf: # Combines the BasicErrorModel and the inline model
        - $ref: "#/components/schemas/Pagination"
        - type: object
          properties:
            data:
              type: array
              items: { "$ref": "#/components/schemas/Location" }
    OccurrenceDayId:
      description: The unique identifier of an occurrence day
      type: integer
      readOnly: true
      example: 1
    OccurrenceDay:
      type: object
      required:
        - name
      properties:
        id:
          $ref: "#/components/schemas/OccurrenceDayId"
          example: 1
        name:
          type: string
          maxLength: 255
          description: A name of an occurrence day
          example: Group
        slug:
          type: string
          maxLength: 255
          description: A unique identifier name for the occurrence day in kebab-case
          example: octobers-lazercrunk-at-the-brillobox
        short:
          type: string
          example: A multi-member occurrence
          description: A brief description of the occurrence day
          maxLength: 255
        created_at:
          $ref: "#/components/schemas/DateTime"
          description: Date and time that the occurrence day was created
          readOnly: true
        updated_at:
          $ref: "#/components/schemas/DateTime"
          description: Date and time that the occurrence day was last updated
          readOnly: true
    OccurrenceDays:
      allOf: # Combines the BasicErrorModel and the inline model
        - $ref: "#/components/schemas/Pagination"
        - type: object
          properties:
            data:
              type: array
              items: { "$ref": "#/components/schemas/OccurrenceDay" }
    OccurrenceTypeId:
      description: The unique identifier of an occurrence type
      type: integer
      readOnly: true
      example: 1
    OccurrenceType:
      type: object
      required:
        - name
      properties:
        id:
          $ref: "#/components/schemas/OccurrenceTypeId"
          example: 1
        name:
          type: string
          maxLength: 255
          description: A name of an occurrence type
          example: Group
        slug:
          type: string
          maxLength: 255
          description: A unique identifier name for the occurrence type in kebab-case
          example: octobers-lazercrunk-at-the-brillobox
        short:
          type: string
          example: A multi-member occurrence
          description: A brief description of the occurrence type
          maxLength: 255
        created_at:
          $ref: "#/components/schemas/DateTime"
          description: Date and time that the occurrence type was created
          readOnly: true
        updated_at:
          $ref: "#/components/schemas/DateTime"
          description: Date and time that the occurrence type was last updated
          readOnly: true
    OccurrenceTypes:
      allOf: # Combines the BasicErrorModel and the inline model
        - $ref: "#/components/schemas/Pagination"
        - type: object
          properties:
            data:
              type: array
              items: { "$ref": "#/components/schemas/OccurrenceType" }
    OccurrenceWeekId:
      description: The unique identifier of an occurrence week
      type: integer
      readOnly: true
      example: 1
    OccurrenceWeek:
      type: object
      required:
        - name
      properties:
        id:
          $ref: "#/components/schemas/OccurrenceWeekId"
          example: 1
        name:
          type: string
          maxLength: 255
          description: A name of an occurrence week
          example: Group
        slug:
          type: string
          maxLength: 255
          description: A unique identifier name for the occurrence week in kebab-case
          example: octobers-lazercrunk-at-the-brillobox
        short:
          type: string
          example: A multi-member occurrence
          description: A brief description of the occurrence week
          maxLength: 255
        created_at:
          $ref: "#/components/schemas/DateTime"
          description: Date and time that the occurrence week was created
          readOnly: true
        updated_at:
          $ref: "#/components/schemas/DateTime"
          description: Date and time that the occurrence week was last updated
          readOnly: true
    OccurrenceWeeks:
      allOf: # Combines the BasicErrorModel and the inline model
        - $ref: "#/components/schemas/Pagination"
        - type: object
          properties:
            data:
              type: array
              items: { "$ref": "#/components/schemas/OccurrenceWeek" }
    Series:
      type: object
      required:
        - id
        - name
        - slug
      properties:
        id:
          $ref: "#/components/schemas/SeriesId"
          example: 1000
        name:
          type: string
          example: Lazercrunk, First Fridays of the Month
          description: The cannonical name of the series
          maxLength: 255
        slug:
          type: string
          maxLength: 255
          description: A unique identifier name for the series in kebab-case
          example: lazercrunk-first-fridays-of-the-month
        short:
          type: string
          example: a really fun monthly dj night featuring performers from around the world
          description: A brief description of the series
          maxLength: 255
        visibility_id:
          $ref: "#/components/schemas/VisibilityId"
          example: 1
          description: Relation to the visibility table that defines the visibility of series
        description:
          type: string
          description: Full description of the series
          example: a really fun monthly dj night featuring performers from around the world and locally playing new electronic music
          maxLength: 65535
        event_type_id:
          $ref: "#/components/schemas/EventTypeId"
          example: 1
          description: Relation to the event type table that defines the type of series
        occurrence_type_id:
          $ref: "#/components/schemas/OccurrenceTypeId"
          example: 1
          description: Relation to the occurrence type table that defines the type of occurrence
        occurrence_week_id:
          $ref: "#/components/schemas/OccurrenceWeekId"
          example: 1
          description: Relation to the occurrence week table that defines the occurrence week of the month
        occurrence_day_id:
          $ref: "#/components/schemas/OccurrenceDayId"
          example: 1
          description: Relation to the occurrence day table that defines the occurrence day of the week
        hold_date:
          type: boolean
          description: Flag indicating that there is a request to hold this date open
          example: true
        promoter_id:
          $ref: "#/components/schemas/EntityId"
          example: 1
          description: Relation to the entity table that defines the promoter for the series
        venue_id:
          $ref: "#/components/schemas/EntityId"
          example: 1
          description: Relation to the entity table that defines the venue for the series
        is_benefit:
          type: boolean
          description: Flag indicating if the series is a benefit
          example: true
        attending:
          description: The number of users who marked that they are attending the series
          type: integer
          example: 10
        like:
          description: The number of users who marked that they like the series
          type: integer
          example: 10
        presale_price:
          description: The price for a presale price for the series
          type: number
          example: 9.99
        door_price:
          description: The price of the show at the door
          type: number
          example: 19.99
        soundcheck_at:
          $ref: "#/components/schemas/DateTime"
          description: Date and time that the series soundcheck is scheduled
        door_at:
          $ref: "#/components/schemas/DateTime"
          description: Date and time that the series doors are scheduled to open
        start_at:
          $ref: "#/components/schemas/DateTime"
          description: Date and time that the series starts
        end_at:
          $ref: "#/components/schemas/DateTime"
          description: Date and time that the series starts
        min_age:
          description: The minimum age requirement for the series in years
          type: integer
          example: 21
        primary_link:
          type: string
          description: The primary URL related to this series
          example: http://lazercrunk.com/october-2022
          maxLength: 255
        ticket_link:
          type: string
          description: The URL for buying a ticket to the series
          example: http://lazercrunk.com/october-2022/tickets
          maxLength: 255
        created_at:
          $ref: "#/components/schemas/DateTime"
          description: Date and time that the series was created
        updated_at:
          $ref: "#/components/schemas/DateTime"
          description: Date and time that the series was last updated
        cancelled_at:
          $ref: "#/components/schemas/DateTime"
          description: Date and time that the series was cancelled
        created_by:
          $ref: "#/components/schemas/UserId"
          example: 1
          description: Relation to the user table that defines the user who created the series
        updated_by:
          $ref: "#/components/schemas/UserId"
          example: 1
          description: Relation to the user table that defines the user who last updated the series
    SeriesResponse:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/SeriesId"
          example: 1000
        name:
          type: string
          example: Lazercrunk, First Fridays of the Month
          description: The cannonical name of the series
          maxLength: 255
        slug:
          type: string
          maxLength: 255
          description: A unique identifier name for the series in kebab-case
          example: lazercrunk-first-fridays-of-the-month
        short:
          type: string
          example: a really fun monthly dj night featuring performers from around the world
          description: A brief description of the series
          maxLength: 255
        visibility:
          $ref: "#/components/schemas/Visibility"
          example: { id: 1, name: Public }
          description: Relation to the visibility table that defines the visibility of series
        description:
          type: string
          description: Full description of the series
          example: a really fun monthly dj night featuring performers from around the world and locally playing new electronic music
          maxLength: 65535
        event_type:
          $ref: "#/components/schemas/EventType"
          description: Relation to the event type table that defines the event type of series
        occurrence_type:
          $ref: "#/components/schemas/OccurrenceType"
          description: Relation to the occurrence type table that defines the type of occurrence
        occurrence_week:
          $ref: "#/components/schemas/OccurrenceWeek"
          description: Relation to the occurrence week table that defines the occurrence week of the month
        occurrence_day:
          $ref: "#/components/schemas/OccurrenceDay"
          description: Relation to the occurrence day table that defines the occurrence day of the week
        hold_date:
          type: boolean
          description: Flag indicating that there is a request to hold this date open
          example: true
        promoter_id:
          $ref: "#/components/schemas/EntityId"
          example: 1
          description: Relation to the entity table that defines the promoter of the series
        venue_id:
          $ref: "#/components/schemas/EntityId"
          example: 1
          description: Relation to the entity table that defines the venue for the series
        is_benefit:
          type: boolean
          description: Flag indicating if the series is a benefit
          example: true
        attending:
          description: The number of users who marked that they are attending the series
          type: integer
          example: 10
        like:
          description: The number of users who marked that they like the series
          type: integer
          example: 10
        presale_price:
          description: The price for a presale price for the series
          type: number
          example: 9.99
        door_price:
          description: The price of the show at the door
          type: number
          example: 19.99
        soundcheck_at:
          $ref: "#/components/schemas/DateTime"
          description: Date and time that the series soundcheck is scheduled
        door_at:
          $ref: "#/components/schemas/DateTime"
          description: Date and time that the series doors are scheduled to open
        start_at:
          $ref: "#/components/schemas/DateTime"
          description: Date and time that the series starts
        end_at:
          $ref: "#/components/schemas/DateTime"
          description: Date and time that the series starts
        min_age:
          description: The minimum age requirement for the series in years
          type: integer
          example: 21
        primary_link:
          type: string
          description: The primary URL related to this series
          example: http://lazercrunk.com/october-2022
          maxLength: 255
        ticket_link:
          type: string
          description: The URL for buying a ticket to the series
          example: http://lazercrunk.com/october-2022/tickets
          maxLength: 255
        created_at:
          $ref: "#/components/schemas/DateTime"
          description: Date and time that the series was created
        updated_at:
          $ref: "#/components/schemas/DateTime"
          description: Date and time that the series was last updated
        cancelled_at:
          $ref: "#/components/schemas/DateTime"
          description: Date and time that the series was cancelled
        created_by:
          $ref: "#/components/schemas/UserSimple"
          description: The related user who created the series
        updated_by:
          $ref: "#/components/schemas/UserSimple"
          description: The related user who updated the entity
    SeriesId:
      description: The unique identifier of a series
      type: integer
      readOnly: true
      example: 1
    Seriess:
      allOf: [$ref: "#/components/schemas/Pagination"]
      type: object
      properties:
        data:
          type: array
          description: List of the current page of series
          items:
            "$ref": "#/components/schemas/SeriesResponse"
    Tag:
      type: object
      required:
        - name
        - tag_type_id
      properties:
        id:
          $ref: "#/components/schemas/TagId"
          example: 1
        name:
          type: string
          description: Name of the tag
          example: post punk
          maxLength: 255
        slug:
          type: string
          maxLength: 255
          description: A unique identifier name for the tag in kebab-case
          example: post-punk
        tag_type_id:
          $ref: "#/components/schemas/TagTypeId"
          example: 1
          description: Relation to the tag type table that defines the type of tag
        created_at:
          $ref: "#/components/schemas/DateTime"
          description: Date and time that the tag was created
          readOnly: true
        updated_at:
          $ref: "#/components/schemas/DateTime"
          description: Date and time that the tag was last updated
          readOnly: true
    TagId:
      description: The unique identifier of a tag
      type: integer
      readOnly: true
      example: 1
    Tags:
      allOf: # Combines the BasicErrorModel and the inline model
        - $ref: "#/components/schemas/Pagination"
        - type: object
          properties:
            data:
              type: array
              items: { "$ref": "#/components/schemas/Tag" }
    TagTypeId:
      description: The unique identifier of a tag type
      type: integer
      readOnly: true
      example: 1
    TagType:
      type: object
      required:
        - name
      properties:
        id:
          $ref: "#/components/schemas/TagId"
          example: 1
        name:
          type: string
          description: Name of the tag
          example: post punk
          maxLength: 255
        created_at:
          $ref: "#/components/schemas/DateTime"
          description: Date and time that the tag was created
          readOnly: true
        updated_at:
          $ref: "#/components/schemas/DateTime"
          description: Date and time that the tag was last updated
          readOnly: true
    TagTypes:
      allOf: # Combines the BasicErrorModel and the inline model
        - $ref: "#/components/schemas/Pagination"
        - type: object
          properties:
            data:
              type: array
              items: { "$ref": "#/components/schemas/TagType" }
    UserId:
      description: The unique identifier of a user
      type: integer
      readOnly: true
      example: 1
    User:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/UserId"
          example: 1000
        name:
          type: string
          description: Name of the user
          example: john.smith
          maxLength: 255
        password:
          type: string
          description: Encrypted password of the user
          example: abcdefg
          maxLength: 60
        email:
          type: string
          description: Email address of the user
          example: john.smith@gmail.com
          maxLength: 255
        user_status_id:
          $ref: "#/components/schemas/UserStatusId"
          example: 1
          description: Relation to the user status table that defines the status of the user
        remember_token:
          type: string
          description: Token used to remember the user's logged in status
          example: ABCDEFGHI
          maxLength: 100
        email_verified_at:
          $ref: "#/components/schemas/DateTime"
          description: Date and time that the user's email was verified
          readOnly: true
        created_at:
          $ref: "#/components/schemas/DateTime"
          description: Date and time that the user was created
          readOnly: true
        updated_at:
          $ref: "#/components/schemas/DateTime"
          description: Date and time that the user was last updated
          readOnly: true
    UserSimple:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/UserId"
          example: 1000
        name:
          type: string
          description: Name of the user
          example: john.smith
          maxLength: 255
        email:
          type: string
          description: Email address of the user
          example: john.smith@gmail.com
          maxLength: 255
    UserResponse:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/UserId"
          example: 1000
        name:
          type: string
          description: Name of the user
          example: john.smith
          maxLength: 255
        password:
          type: string
          description: Encrypted password of the user
          example: abcdefg
          maxLength: 60
        email:
          type: string
          description: Email address of the user
          example: john.smith@gmail.com
          maxLength: 255
        user_status_id:
          $ref: "#/components/schemas/UserStatusId"
          example: 1
          description: Relation to the user status table that defines the status of the user
        remember_token:
          type: string
          description: Token used to remember the user's logged in status
          example: ABCDEFGHI
          maxLength: 100
        email_verified_at:
          $ref: "#/components/schemas/DateTime"
          description: Date and time that the user's email was verified
          readOnly: true
        created_at:
          $ref: "#/components/schemas/DateTime"
          description: Date and time that the user was created
          readOnly: true
        updated_at:
          $ref: "#/components/schemas/DateTime"
          description: Date and time that the user was last updated
          readOnly: true
    UserRequest:
      type: object
      required:
        - name
        - email
        - password
      properties:
        name:
          type: string
          description: Name of the user
          example: john.smith
          maxLength: 255
        password:
          type: string
          description: Encrypted password of the user
          example: abcdefg
          maxLength: 60
        email:
          type: string
          description: Email address of the user
          example: john.smith@gmail.com
          maxLength: 255
        user_status_id:
          $ref: "#/components/schemas/UserStatusId"
          example: 1
          description: Relation to the user status table that defines the status of the user
        remember_token:
          type: string
          description: Token used to remember the user's logged in status
          example: ABCDEFGHI
          maxLength: 100
    Users:
      allOf: # Combines the BasicErrorModel and the inline model
        - $ref: "#/components/schemas/Pagination"
        - type: object
          properties:
            data:
              type: array
              items: { "$ref": "#/components/schemas/Users" }
    UserStatusId:
      description: The unique identifier of an user status
      type: integer
      readOnly: true
      example: 1
    Visibility:
      type: object
      required:
        - name
      properties:
        id:
          $ref: "#/components/schemas/UserId"
          example: 1000
        name:
          type: string
          example: Public
        created_at:
          $ref: "#/components/schemas/DateTime"
          description: Date and time that the visibility was created
          readOnly: true
        updated_at:
          $ref: "#/components/schemas/DateTime"
          description: Date and time that the visibility was last updated
          readOnly: true
    VisibilityId:
      description: The unique identifier of a visibility
      type: integer
      readOnly: true
      example: 1
    Visibilities:
      allOf: # Combines the BasicErrorModel and the inline model
        - $ref: "#/components/schemas/Pagination"
        - type: object
          properties:
            data:
              type: array
              items: { "$ref": "#/components/schemas/Visibility" }
    DateTime:
      type: string
      description: A date and time
      example: "2018-03-20T09:12:28Z"
      format: date-time
    Error:
      type: object
      required:
        - message
      properties:
        message:
          description: A human readable error message
          type: string
    Pagination:
      type: object
      properties:
        current_page:
          description: The current page in the paginated list
          type: integer
        first_page_url:
          description: URL for the first page
          type: string
          example: "https://dev.arcane.city/api/resources?page=1"
        from:
          description: First element in the current page
          type: integer
          example: 1
        last_page:
          description: Last page of results
          type: integer
          example: 1
        last_page_url:
          description: URL for the first page
          type: string
          example: "https://dev.arcane.city/api/resources?page=100"
        links:
          description: Array of links used to paginate the list of entities
          type: array
          items: {}
        next_page_url:
          description: URL for the next page
          type: string
          example: "https://dev.arcane.city/api/resources?page=2"
        path:
          description: Path for the primary route
          type: string
          example: "https://dev.arcane.city/api/resources"
        per_page:
          description: Number of results per page
          type: integer
          example: 25
        prev_page_url:
          description: URL for the previous page
          type: string
          example: "https://dev.arcane.city/api/resources?page=0"
        to:
          description: Last element in the current page
          type: integer
          example: 25
        total:
          description: Total number of results from the request
          type: integer
          example: 100
        data:
          description: List of the current page of the paginated entity
          type: array
          items: {}
security:
  - basicAuth: []
tags:
  - name: events
  - name: entities
  - name: links
  - name: series
  - name: users
  - name: tags
  - name: blogs
  - name: forums
  - name: threads
  - name: posts
paths:
  /api/events:
    post:
      tags:
        - events
      summary: Create Event
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EventRequest"
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EventResponse"
        201:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Event"
        500:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    get:
      tags:
        - events
      summary: Get Events
      operationId: getEvents
      parameters:
        - name: filters[name]
          in: query
          required: false
          description: A filter query of the event name
          schema:
            type: string
          example: "Lazercrunk"
        - name: filters[venue]
          in: query
          required: false
          description: A filter query of the venue name
          schema:
            type: string
          example: "Brillobox"
        - name: filters[promoter]
          in: query
          required: false
          description: A filter query of the promoter name
          schema:
            type: string
          example: "Cutups"
        - name: filters[related]
          in: query
          required: false
          description: A filter query of related entity name
          schema:
            type: string
          example: "0h85"
        - name: filters[series]
          in: query
          required: false
          description: A filter query of related series name
          schema:
            type: string
          example: "Lazercrunk"
        - name: filters[event_type]
          in: query
          required: false
          description: A filter query of related event type name
          schema:
            type: string
          example: "Concert"
        - name: filters[start_at][start]
          in: query
          required: false
          description: A filter query of the start time starting
          schema:
            type: string
          example: "2022-01-01 1:00:00"
        - name: filters[start_at][end]
          in: query
          required: false
          description: A filter query of the start time ending
          schema:
            type: string
          example: "2022-02-01 2:00:00"
        - name: filters[end_at][start]
          in: query
          required: false
          description: A filter query of the end time starting
          schema:
            type: string
          example: "2022-02-01 1:00:00"
        - name: filters[end_at][end]
          in: query
          required: false
          description: A filter query of the end time ending
          schema:
            type: string
          example: "2022-01-01 2:00:00"
        - name: filters[ages]
          in: query
          required: false
          description: A filter query of the end time ending
          schema:
            type: integer
          example: 21
        - name: sort
          in: query
          required: false
          description: A column to be used to sort the query
          schema:
            type: string
            example: name
        - name: direction
          in: query
          required: false
          description: A string indicating the sort direction of the query (asc or desc)
          schema:
            type: string
            example: asc
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Events"
  /api/events/reset:
    get:
      tags:
        - events
      summary: Reset event filters
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/events/{eventId}:
    parameters:
      - name: eventId
        description: The unique identifier of the event
        in: path
        required: true
        example: 1
        schema:
          $ref: "#/components/schemas/EventId"
    get:
      tags:
        - events
      summary: Get Event
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EventResponse"
    put:
      tags:
        - events
      summary: Update Events
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EventRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EventResponse"
    delete:
      tags:
        - events
      summary: Delete Event
      responses:
        "204":
          description: Successful response
          content:
            application/json: {}
  /api/entities:
    post:
      tags:
        - entities
      summary: Create Entity
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EntityRequest"
      responses:
        "201":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Entity"
    get:
      tags:
        - entities
      summary: Get Entities
      operationId: getEntities
      parameters:
        - name: filters[name]
          in: query
          required: false
          description: A filter query of the event name
          schema:
            type: string
          example: "cutups"
        - name: filters[role]
          in: query
          required: false
          description: A filter query of the role name
          schema:
            type: string
          example: "dj"
        - name: filters[tag]
          in: query
          required: false
          description: A filter query of related tag
          schema:
            type: string
          example: "jungle"
        - name: filters[entity_status]
          in: query
          required: false
          description: A filter query of related entity status name
          schema:
            type: string
          example: "Active"
        - name: filters[entity_type]
          in: query
          required: false
          description: A filter query of related entity type name
          schema:
            type: string
          example: "Individual"
        - name: sort
          in: query
          required: false
          description: A column to be used to sort the query
          schema:
            type: string
            example: name
        - name: direction
          in: query
          required: false
          description: A string indicating the sort direction of the query (asc or desc)
          schema:
            type: string
            example: asc
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Entities"
  /api/entities/reset:
    get:
      tags:
        - events
      summary: Reset Entity filters
      operationId: resetEntityFilters
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/entities/{slug}:
    parameters:
      - name: slug
        description: The unique identifier of the entity
        in: path
        required: true
        schema:
          type: string
        example: cutups
    get:
      tags:
        - entities
      summary: Get Entity
      operationId: getEntityBySlug
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Entity"
    put:
      tags:
        - entities
      summary: Update Entity
      operationId: updateEntityBySlug
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EntityRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Entity"
    delete:
      tags:
        - entities
      summary: Delete Entity
      operationId: deleteEntityBySlug
      responses:
        "204":
          description: Successful response
          content:
            application/json: {}
  /api/entity-statuses:
    get:
      tags:
        - entity-statuses
      summary: Get Entity Statuses
      operationId: getEntityStatuses
      parameters:
        - name: filters[name]
          in: query
          required: false
          description: A filter query of the entity status name
          schema:
            type: string
          example: "Group"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pagination"
    post:
      tags:
        - entity-statuses
      summary: Create entity status
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EntityStatus"
      responses:
        "201":
          description: Successful response
          content:
            application/json: {}
  /api/entity-statuses/{entityStatusId}:
    parameters:
      - name: entityStatusId
        description: The unique identifier of the entity status
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/EntityStatusId"
    get:
      tags:
        - entity-statuses
      summary: Get EntityStatus
      operationId: getEntityStatus
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityStatus"
    put:
      tags:
        - entity-statuses
      summary: Update Entity Status
      operationId: updateEntityStatus
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EntityStatus"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityStatus"
    delete:
      tags:
        - entity-statuses
      summary: Delete Entity Status
      operationId: deleteEntityStatus
      responses:
        "204":
          description: Successful response
          content:
            application/json: {}
  /api/entity-types:
    get:
      tags:
        - entity-types
      summary: Get Entity Types
      parameters:
        - name: filters[name]
          in: query
          required: false
          description: A filter query of the entity status name
          schema:
            type: string
          example: "Group"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pagination"
    post:
      tags:
        - entity-types
      summary: Create entity type
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EntityType"
      responses:
        "201":
          description: Successful response
          content:
            application/json: {}
  /api/entity-types/{entityTypeId}:
    parameters:
      - name: entityTypeId
        description: The unique identifier of the entity type
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/EntityTypeId"
    get:
      tags:
        - entity-types
      summary: Get EntityType
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityType"
    put:
      tags:
        - entity-types
      summary: Update Entity Type
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EntityType"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityType"
    delete:
      tags:
        - entity-types
      summary: Delete Entity Type
      responses:
        "204":
          description: Successful response
          content:
            application/json: {}
  /api/links:
    get:
      tags:
        - links
      summary: Get Links
      operationId: getAllLinks
      parameters:
        - name: title
          in: query
          schema:
            type: string
          example: Google
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Links"
    post:
      tags:
        - links
      summary: Create link
      operationId: createLink
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Link"
      responses:
        "201":
          description: Successful response
          content:
            application/json: {}
  /api/links/{linkId}:
    parameters:
      - name: linkId
        description: The unique identifier of the link
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/LinkId"
    get:
      tags:
        - links
      summary: Get Link
      operationId: getLinkById
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Link"
    put:
      tags:
        - links
      summary: Update link
      operationId: updateLinkById
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Link"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Link"
    delete:
      tags:
        - links
      summary: Delete Link
      operationId: deleteLinkById
      responses:
        "204":
          description: Successful response
          content:
            application/json: {}
  /api/series:
    post:
      tags:
        - series
      summary: Create Series
      operationId: createSeries
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Series"
      responses:
        "201":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Series"
    get:
      tags:
        - series
      summary: Get Series by filters
      operationId: getAllSeries
      parameters:
        - name: filters[name]
          in: query
          required: false
          description: A filter query of series name
          schema:
            type: string
          example: "Lazercrunk"
        - name: filters[event_type]
          in: query
          required: false
          description: A filter query of related event type name
          schema:
            type: string
          example: "Concert"
        - name: filters[venue]
          in: query
          required: false
          description: A filter query of the venue name
          schema:
            type: string
          example: "Brillobox"
        - name: filters[promoter]
          in: query
          required: false
          description: A filter query of the promoter name
          schema:
            type: string
          example: "Cutups"
        - name: filters[related]
          in: query
          required: false
          description: A filter query of related entity name
          schema:
            type: string
          example: "0h85"
        - name: filters[occurrence_type]
          in: query
          required: false
          description: A filter query of related occurrence type name
          schema:
            type: string
          example: "Monthly"
        - name: filters[occurrence_week]
          in: query
          required: false
          description: A filter query of related occurrence week name
          schema:
            type: string
          example: "First"
        - name: filters[occurrence_day]
          in: query
          required: false
          description: A filter query of related occurrence day name
          schema:
            type: string
          example: "Friday"
        - name: filters[start_at][start]
          in: query
          required: false
          description: A filter query of the start time starting
          schema:
            type: string
          example: "2022-01-01 1:00:00"
        - name: filters[start_at][end]
          in: query
          required: false
          description: A filter query of the start time ending
          schema:
            type: string
          example: "2022-02-01 2:00:00"
        - name: filters[end_at][start]
          in: query
          required: false
          description: A filter query of the end time starting
          schema:
            type: string
          example: "2022-02-01 1:00:00"
        - name: filters[end_at][end]
          in: query
          required: false
          description: A filter query of the end time ending
          schema:
            type: string
          example: "2022-01-01 2:00:00"
        - name: filters[ages]
          in: query
          required: false
          description: A filter query of the end time ending
          schema:
            type: integer
          example: 21
        - name: sort
          in: query
          required: false
          description: A column to be used to sort the query
          schema:
            type: string
            example: name
        - name: direction
          in: query
          required: false
          description: A string indicating the sort direction of the query (asc or desc)
          schema:
            type: string
            example: asc
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Seriess"
  /api/series/{seriesId}:
    parameters:
      - name: seriesId
        description: The unique identifier of the series
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/SeriesId"
    get:
      tags:
        - series
      summary: Get one Series
      operationId: getSeriesById
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SeriesResponse"
    put:
      tags:
        - series
      summary: Update Series
      operationId: updateSeriesById
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Series"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SeriesResponse"
    delete:
      tags:
        - series
      summary: Delete Series
      operationId: deleteSeriesById
      responses:
        "204":
          description: Successful response
          content:
            application/json: {}
  /api/tags:
    post:
      tags:
        - tags
      summary: Create Tag
      operationId: createTag
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Tag"
      responses:
        "201":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tag"
    get:
      tags:
        - tags
      summary: Get Tags
      operationId: getAllTags
      parameters:
        - name: filters[name]
          in: query
          schema:
            type: string
          example: "techno"
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
  /api/tags/{tagId}:
    parameters:
      - name: tagId
        description: The unique identifier of the tag
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/TagId"
    get:
      tags:
        - tags
      summary: Get one Tag
      operationId: getTagById
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tag"
    put:
      tags:
        - tags
      summary: Update Tag
      operationId: updateTagById
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Tag"
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - tags
      summary: Delete Tag
      operationId: deleteTagById
      responses:
        "204":
          description: Successful response
          content:
            application/json: {}
  /api/users:
    post:
      tags:
        - users
      summary: Create User
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRequest"
      responses:
        "201":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
    get:
      tags:
        - users
      summary: Get Users
      operationId: getAllUsers
      parameters:
        - name: filters[status]
          in: query
          required: false
          description: A filter query of the user status
          schema:
            type: string
          example: Active
        - name: filters[name]
          in: query
          required: false
          description: A filter query of the user name
          schema:
            type: string
          example: Geoff
        - name: filters[email]
          in: query
          required: false
          description: A filter query of the user email
          schema:
            type: string
          example: geoff.maddock@gmail.com
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Users"
  /api/users/{userId}:
    parameters:
      - name: userId
        description: The unique identifier of the user
        in: path
        required: true
        schema:
          $ref: "#/components/schemas/UserId"
    get:
      tags:
        - users
      summary: Get one User
      operationId: getUserById
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
    put:
      tags:
        - users
      summary: Update User
      operationId: updateUserById
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
    delete:
      tags:
        - users
      summary: Delete User
      operationId: deleteUserById
      responses:
        "204":
          description: Successful response
          content:
            application/json: {}
  /api/docs:
    get:
      tags:
        - default
      summary: Get Docs
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
