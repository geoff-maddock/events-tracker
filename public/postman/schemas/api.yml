openapi: 3.0.3
info:
  title: Arcane City
  version: 2025.06.09
  description: REST API for working with Arcane City data
  contact:
    name: Geoff Maddock
    email: geoff.maddock@gmail.com
servers:
  - url: https://arcane.city
    description: Production
  - url: https://stage.arcane.city
    description: Stage
  - url: https://dev.arcane.city
    description: Development
tags:
  - name: activities
  - name: blogs
  - name: entities
  - name: entity-statuses
  - name: entity-types
  - name: events
  - name: event-types
  - name: event-statuses
  - name: forums
  - name: links
  - name: menus
  - name: locations
  - name: photos
  - name: posts
  - name: roles
  - name: series
  - name: tags
  - name: threads
  - name: users
  - name: visibilities
  - name: occurrence-types
  - name: occurrence-weeks
  - name: occurrence-days
components:
  responses:
    NotFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    Unexpected:
      description: Unexpected
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
  schemas:
    Activity:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
          example: 1
          description: Unique ID of the activity
        user_id:
          type: integer
          example: 1
          description: The ID of the user who performed the activity
        object_table:
          type: string
          maxLength: 255
          description: The table name of the related object
          example: "Event"
        object_id:
          type: integer
          example: 1
          description: The ID of the related object
        object_name:
          type: string
          maxLength: 255
          description: The name of the related object
          example: "October's Lazercrunk at the Brillobox"
        action_id:
          type: integer
          example: 1
          description: Relation to the action table that defines the type of activity
        message:
          type: string
          maxLength: 255
          description: A description of the activity
          example: "Created event October's Lazercrunk at the Brillobox"
        changes:
          type: string
          description: JSON data about changes made
          example: '{"name":"October''s Lazercrunk at the Brillobox"}'
        ip_address:
          type: string
          maxLength: 45
          description: IP address of the user who performed the action
          example: "192.168.0.1"
        child_object_table:
          type: string
          maxLength: 255
          description: The table name of the related child object, if applicable
          example: "Entity"
        child_object_id:
          type: integer
          example: 2
          description: The ID of the related child object, if applicable
        child_object_name:
          type: string
          maxLength: 255
          description: The name of the related child object, if applicable
          example: "Brillobox"
        created_at:
          type: string
          example: "2018-03-20T09:12:28Z"
          format: date-time
          description: Date and time that the activity was created
          readOnly: true
        updated_at:
          type: string
          example: "2018-03-20T09:12:28Z"
          format: date-time
          description: Date and time that the activity was last updated
          readOnly: true
        user:
          $ref: "#/components/schemas/UserSimple"
        action:
          type: object
          properties:
            id:
              type: integer
              readOnly: true
              example: 1
            name:
              type: string
              maxLength: 255
              description: Name of the action performed
              example: "Create"
    Activities:
      allOf: [$ref: "#/components/schemas/Pagination"]
      type: object
      properties:
        data:
          type: array
          description: List of the current page of activities
          items:
            "$ref": "#/components/schemas/Activity"
    Blog:
      type: object
      required:
        - name
      properties:
        id:
          type: integer
          readOnly: true
          example: 1
        name:
          type: string
          maxLength: 255
          description: A name of an blog
          example: Group
        slug:
          type: string
          maxLength: 255
          description: A unique identifier name for the blog in kebab-case
          example: group-slug
        visibility_id:
          type: integer
          example: 1
          description: Relation to the visibility table that defines the visibility of the blog
        content_type_id:
          type: integer
          example: 1
          description: Relation to the content type of the blog
        body:
          type: string
          example: Here is a short blog
          description: Main body of the blog
          maxLength: 65535
        menu_id:
          type: integer
          readOnly: true
          example: 1
          description: Relation to the menu of the blog
        sort_order:
          type: integer
          example: 0
          description: Sort order of the blog
        created_at:
          type: string
          example: "2018-03-20T09:12:28Z"
          format: date-time
          description: Date and time that the entity type was created
          readOnly: true
        updated_at:
          type: string
          example: "2018-03-20T09:12:28Z"
          format: date-time
          description: Date and time that the entity type was last updated
          readOnly: true
    Blogs:
      allOf: [$ref: "#/components/schemas/Pagination"]
      type: object
      properties:
        data:
          type: array
          description: List of the current page of blogs
          items:
            "$ref": "#/components/schemas/Blog"
    Embeds:
      allOf: [$ref: "#/components/schemas/Pagination"]
      type: object
      properties:
        data:
          type: array
          description: List of the current page of event embeds
          items:
            "$ref": "#/components/schemas/EmbedResponse"
    EmbedResponse:
      type: object
      properties:
        embed:
          type: string
          maxLength: 65535
          description: Code that can be output to display embedded content, typically external content
          example: https://bandcamp.com/brillobox
    Photos:
      allOf: [$ref: "#/components/schemas/Pagination"]
      type: object
      properties:
        data:
          type: array
          description: List of the photo responses
          items:
            "$ref": "#/components/schemas/PhotoResponse"
    PhotoResponse:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
          example: 1
          description: Unique ID of the photo
        name:
          type: string
          maxLength: 255
          description: The cannonical name of the photo
          example: Brillobox
        photo:
          type: string
          maxLength: 65535
          description: A link to a photo image
          example: https://some.url/imagelink.jpg
        thumbnail:
          type: string
          maxLength: 65535
          description: A link to a photo image thumbnail
          example: https://some.url/tb-imagelink.jpg
        is_primary:
          type: boolean
          description: Flag indicating if the photo is primary for the entity
          example: true
        created_by:
          type: integer
          readOnly: true
          example: 1
          description: Relation to the user table that defines the user who created the photo
    EntityRequest:
      type: object
      required:
        - name
        - slug
        - entity_type_id
        - entity_status_id
      properties:
        name:
          type: string
          maxLength: 255
          description: The cannonical name of the enitity
          example: Brillobox
        slug:
          type: string
          maxLength: 255
          description: A unique identifier name for the entity in kebab-case
          example: brillobox-bar
        short:
          type: string
          maxLength: 255
          description: A brief description of the enitity
          example: A two level bar and venue
        description:
          type: string
          maxLength: 65535
          description: Full description of the entity
          example: A two level bar and venue that specializes in indie music and vegetarian food
        entity_type_id:
          description: Relation to the entity type table that defines the type of an entity
          type: integer
          example: 1
        entity_status_id:
          description: The unique identifier of an entity type
          type: integer
          example: 1
        started_at:
          type: string
          example: "2018-03-20T09:12:28Z"
          format: date-time
          description: Date and time that the entity started to exist
        facebook_username:
          type: string
          maxLength: 64
          description: The entity's username on facebook
          example: johnsmith
        twitter_username:
          type: string
          maxLength: 64
          description: The entity's username on twitter
          example: johnsmith
        tag_list:
          type: array
          items: { "type": "integer" }
        role_list:
          type: array
          items: { "type": "integer" }
        alias_list:
          type: array
          items: { "type": "integer" }
    EntityResponse:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
          example: 1
          description: Unique ID of the entity
        name:
          type: string
          maxLength: 255
          description: The cannonical name of the enitity
          example: Brillobox
        slug:
          type: string
          maxLength: 255
          description: A unique identifier name for the entity in kebab-case
          example: brillobox-bar
        short:
          type: string
          maxLength: 255
          description: A brief description of the enitity
          example: A two level bar and venue
        description:
          type: string
          maxLength: 65535
          description: Full description of the entity
          example: A two level bar and venue that specializes in indie music and vegetarian food
        entity_type:
          $ref: "#/components/schemas/EntityTypeResponse"
        entity_status:
          $ref: "#/components/schemas/EntityStatusResponse"
        created_by:
          $ref: "#/components/schemas/UserSimple"
        updated_by:
          $ref: "#/components/schemas/UserSimple"
        created_at:
          type: string
          example: "2018-03-20T09:12:28Z"
          format: date-time
          description: Date and time that the entity was created
        updated_at:
          type: string
          example: "2018-03-20T09:12:28Z"
          format: date-time
          description: Date and time that the entity was last updated
        started_at:
          type: string
          example: "2018-03-20T09:12:28Z"
          format: date-time
          description: Date and time that the entity started to exist
        facebook_username:
          type: string
          maxLength: 64
          description: The entity's username on facebook
          example: johnsmith
        twitter_username:
          type: string
          maxLength: 64
          description: The entity's username on twitter
          example: johnsmith
        links:
          type: array
          items: { "$ref": "#/components/schemas/Link" }
        tags:
          type: array
          items: { "$ref": "#/components/schemas/Tag" }
    Entities:
      allOf: [$ref: "#/components/schemas/Pagination"]
      type: object
      properties:
        data:
          type: array
          description: List of the current page of entities
          items:
            "$ref": "#/components/schemas/EntityResponse"
    EntityTypeResponse:
      type: object
      required:
        - name
      properties:
        id:
          type: integer
          readOnly: true
          example: 1
        name:
          type: string
          maxLength: 255
          description: A name of an entity type
          example: Group
        slug:
          type: string
          maxLength: 255
          description: A unique identifier name for the entity type in kebab-case
          example: group-slug
        short:
          type: string
          example: A multi-member entity
          description: A brief description of the entity type
          maxLength: 255
        created_at:
          type: string
          example: "2018-03-20T09:12:28Z"
          format: date-time
          description: Date and time that the entity type was created
          readOnly: true
        updated_at:
          type: string
          example: "2018-03-20T09:12:28Z"
          format: date-time
          description: Date and time that the entity type was last updated
          readOnly: true
    EntityTypeRequest:
      type: object
      required:
        - name
      properties:
        id:
          type: integer
          readOnly: true
          example: 1
        name:
          type: string
          maxLength: 255
          description: A name of an entity type
          example: Group
        slug:
          type: string
          maxLength: 255
          description: A unique identifier name for the entity type in kebab-case
          example: group-slug
        short:
          type: string
          example: A multi-member entity
          description: A brief description of the entity type
          maxLength: 255
    EntityTypes:
      allOf: [$ref: "#/components/schemas/Pagination"]
      type: object
      properties:
        data:
          type: array
          description: List of the current page of events
          items:
            "$ref": "#/components/schemas/EntityTypeResponse"
    EntityStatusResponse:
      type: object
      required:
        - name
      properties:
        id:
          description: The unique identifier of an entity type
          type: integer
          readOnly: true
          example: 1
        name:
          type: string
          maxLength: 255
          description: A name of an entity status
          example: Active
        created_at:
          type: string
          example: "2018-03-20T09:12:28Z"
          format: date-time
          description: Date and time that the entity status was created
          readOnly: true
        updated_at:
          type: string
          example: "2018-03-20T09:12:28Z"
          format: date-time
          description: Date and time that the entity status was last updated
          readOnly: true
    EntityStatusRequest:
      type: object
      required:
        - name
      properties:
        id:
          description: The unique identifier of an entity type
          type: integer
          readOnly: true
          example: 1
        name:
          type: string
          maxLength: 255
          description: A name of an entity status
          example: Active
    EventRequest:
      type: object
      required:
        - name
        - slug
        - start_at
      properties:
        id:
          type: integer
          readOnly: true
          example: 1
        name:
          type: string
          example: October's Lazercrunk at the Brillobox
          description: The cannonical name of the event
          maxLength: 255
        slug:
          type: string
          maxLength: 255
          description: A unique identifier name for the event in kebab-case
          example: octobers-lazercrunk-at-the-brillobox
        short:
          type: string
          nullable: true
          example: a really fun dj night featuring performers from around the world
          description: A brief description of the event
          maxLength: 255
        visibility_id:
          type: integer
          nullable: true
          example: 1
          description: Relation to the visibility table that defines the visibility of events
        description:
          type: string
          nullable: true
          description: Full description of the event
          example: a really fun dj night featuring performers from around the world and locally playing new electronic music
          maxLength: 65535
        event_status_id:
          type: integer
          nullable: true
          example: 1
          description: Relation to the event type table that defines the status of the event
        event_type_id:
          type: integer
          example: 1
          description: Relation to the event type table that defines the type of event
        promoter_id:
          type: integer
          nullable: true
          example: 1
          description: Relation to the entity table that defines the promoter of the event
        venue_id:
          type: integer
          nullable: true
          example: 1
          description: Relation to the entity table that defines the venue for the event
        is_benefit:
          type: boolean
          description: Flag indicating if the event is a benefit
          example: false
        attending:
          description: The number of users who marked that they are attending the event
          type: integer
          example: 10
        attendees:
          type: array
          description: List of users attending the event
          items: { "$ref": "#/components/schemas/MinimalUser" }
        presale_price:
          description: The price for a presale price for the event
          type: number
          nullable: true
          example: 9.99
        door_price:
          description: The price of the show at the door
          type: number
          nullable: true
          example: 19.99
        soundcheck_at:
          type: string
          nullable: true
          example: 2018-03-20T09:12:28Z
          format: date-time
          description: Date and time that the event soundcheck is scheduled
        door_at:
          type: string
          nullable: true
          example: 2018-03-20T09:12:28Z
          format: date-time
          description: Date and time that the event doors are scheduled to open
        start_at:
          type: string
          example: 2018-03-20T09:12:28Z
          format: date-time
          description: Date and time that the event starts
        end_at:
          type: string
          nullable: true
          example: 2018-03-20T09:12:28Z
          format: date-time
          description: Date and time that the event starts
        series_id:
          type: integer
          nullable: true
          example: 1
          description: Relation to the series table that defines the series for the event
        min_age:
          description: The minimum age requirement for the event in years
          type: integer
          nullable: true
          example: 21
        primary_link:
          type: string
          nullable: true
          description: The primary URL related to this event
          example: http://lazercrunk.com/october-2022
          maxLength: 255
        ticket_link:
          type: string
          nullable: true
          description: The URL for buying a ticket to the event
          example: http://lazercrunk.com/october-2022/tickets
          maxLength: 255
        cancelled_at:
          type: string
          example: 2018-03-20T09:12:28Z
          format: date-time
          description: Date and time that the event was cancelled
        tag_list:
          type: array
          items: { "type": "integer" }
        entity_list:
          type: array
          items: { "type": "integer" }
    Event:
      type: object
      required:
        - id
        - name
        - slug
      properties:
        id:
          type: integer
          readOnly: true
          example: 1
        name:
          type: string
          example: October's Lazercrunk at the Brillobox
          description: The cannonical name of the event
          maxLength: 255
        slug:
          type: string
          maxLength: 255
          description: A unique identifier name for the event in kebab-case
          example: octobers-lazercrunk-at-the-brillobox
        short:
          type: string
          example: a really fun dj night featuring performers from around the world
          description: A brief description of the event
          maxLength: 255
        visibility_id:
          type: integer
          readOnly: true
          example: 1
          description: Relation to the visibility table that defines the visibility of events
        description:
          type: string
          description: Full description of the event
          example: a really fun dj night featuring performers from around the world and locally playing new electronic music
          maxLength: 65535
        event_status_id:
          type: integer
          readOnly: true
          example: 1
          description: Relation to the event type table that defines the status of the event
        event_type_id:
          type: integer
          readOnly: true
          example: 1
          description: Relation to the event type table that defines the type of event
        promoter_id:
          type: integer
          readOnly: true
          example: 1
          description: Relation to the entity table that defines the promoter of the event
        venue_id:
          type: integer
          readOnly: true
          example: 1
          description: Relation to the entity table that defines the venue for the event
        is_benefit:
          type: boolean
          description: Flag indicating if the event is a benefit
          example: true
        attendees:
          type: array
          description: List of users attending the event
          items: { "$ref": "#/components/schemas/MinimalUser" }
        like:
          description: The number of users who marked that they like the event
          type: integer
          example: 10
        presale_price:
          description: The price for a presale price for the event
          type: number
          example: 9.99
        door_price:
          description: The price of the show at the door
          type: number
          example: 19.99
        soundcheck_at:
          type: string
          example: "2018-03-20T09:12:28Z"
          format: date-time
          description: Date and time that the event soundcheck is scheduled
        door_at:
          type: string
          example: "2018-03-20T09:12:28Z"
          format: date-time
          description: Date and time that the event doors are scheduled to open
        start_at:
          type: string
          example: "2018-03-20T09:12:28Z"
          format: date-time
          description: Date and time that the event starts
        end_at:
          type: string
          example: "2018-03-20T09:12:28Z"
          format: date-time
          description: Date and time that the event starts
        series_id:
          type: integer
          readOnly: true
          example: 1
          description: Relation to the series table that defines the series for the event
        min_age:
          description: The minimum age requirement for the event in years
          type: integer
          example: 21
        primary_link:
          type: string
          description: The primary URL related to this event
          example: http://lazercrunk.com/october-2022
          maxLength: 255
        ticket_link:
          type: string
          description: The URL for buying a ticket to the event
          example: http://lazercrunk.com/october-2022/tickets
          maxLength: 255
        created_at:
          type: string
          example: "2018-03-20T09:12:28Z"
          format: date-time
          description: Date and time that the event was created
        updated_at:
          type: string
          example: "2018-03-20T09:12:28Z"
          format: date-time
          description: Date and time that the event was last updated
        cancelled_at:
          type: string
          example: "2018-03-20T09:12:28Z"
          format: date-time
          description: Date and time that the event was cancelled
        created_by:
          type: integer
          readOnly: true
          example: 1
          description: Relation to the user table that defines the user who created the event
        updated_by:
          type: integer
          readOnly: true
          example: 1
          description: Relation to the user table that defines the user who last updated the event
    EventResponse:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
          example: 1
        name:
          type: string
          example: October's Lazercrunk at the Brillobox
          description: The cannonical name of the event
          maxLength: 255
        slug:
          type: string
          maxLength: 255
          description: A unique identifier name for the event in kebab-case
          example: octobers-lazercrunk-at-the-brillobox
        short:
          type: string
          example: a really fun dj night featuring performers from around the world
          description: A brief description of the event
          maxLength: 255
        visibility:
          $ref: "#/components/schemas/Visibility"
        description:
          type: string
          description: Full description of the event
          example: a really fun dj night featuring performers from around the world and locally playing new electronic music
          maxLength: 65535
        event_status:
          $ref: "#/components/schemas/EventStatusResponse"
        event_type:
          $ref: "#/components/schemas/EventTypeResponse"
        promoter:
          $ref: "#/components/schemas/EntityResponse"
        venue:
          $ref: "#/components/schemas/EntityResponse"
        is_benefit:
          type: boolean
          description: Flag indicating if the event is a benefit
          example: true
        attending:
          description: The number of users who marked that they are attending the event
          type: integer
          example: 10
        like:
          description: The number of users who marked that they like the event
          type: integer
          example: 10
        presale_price:
          description: The price for a presale price for the event
          type: number
          example: 9.99
        door_price:
          description: The price of the show at the door
          type: number
          example: 19.99
        soundcheck_at:
          type: string
          example: "2018-03-20T09:12:28Z"
          format: date-time
          description: Date and time that the event soundcheck is scheduled
        door_at:
          type: string
          example: "2018-03-20T09:12:28Z"
          format: date-time
          description: Date and time that the event doors are scheduled to open
        start_at:
          type: string
          example: "2018-03-20T09:12:28Z"
          format: date-time
          description: Date and time that the event starts
        end_at:
          type: string
          example: "2018-03-20T09:12:28Z"
          format: date-time
          description: Date and time that the event starts
        series:
          $ref: "#/components/schemas/SeriesResponse"
        min_age:
          description: The minimum age requirement for the event in years
          type: integer
          example: 21
        primary_link:
          type: string
          description: The primary URL related to this event
          example: http://lazercrunk.com/october-2022
          maxLength: 255
        ticket_link:
          type: string
          description: The URL for buying a ticket to the event
          example: http://lazercrunk.com/october-2022/tickets
          maxLength: 255
        created_at:
          type: string
          example: "2018-03-20T09:12:28Z"
          format: date-time
          description: Date and time that the event was created
        updated_at:
          type: string
          example: "2018-03-20T09:12:28Z"
          format: date-time
          description: Date and time that the event was last updated
        cancelled_at:
          type: string
          example: "2018-03-20T09:12:28Z"
          format: date-time
          description: Date and time that the event was cancelled
        tags:
          type: array
          items: { "$ref": "#/components/schemas/Tag" }
        created_by:
          $ref: "#/components/schemas/UserSimple"
        updated_by:
          $ref: "#/components/schemas/UserSimple"
    Events:
      allOf: [$ref: "#/components/schemas/Pagination"]
      type: object
      properties:
        data:
          type: array
          description: List of the current page of events
          items:
            "$ref": "#/components/schemas/EventResponse"
    EventStatusResponse:
      type: object
      required:
        - name
      properties:
        id:
          type: integer
          readOnly: true
          example: 1
        name:
          type: string
          maxLength: 255
          description: A name of an event status
          example: Active
        created_at:
          type: string
          example: "2018-03-20T09:12:28Z"
          format: date-time
          description: Date and time that the event status was created
          readOnly: true
        updated_at:
          type: string
          example: "2018-03-20T09:12:28Z"
          format: date-time
          description: Date and time that the event status was last updated
          readOnly: true
    EventStatusRequest:
      type: object
      required:
        - name
      properties:
        id:
          type: integer
          readOnly: true
          example: 1
        name:
          type: string
          maxLength: 255
          description: A name of an event status
          example: Active
    EventStatuses:
      allOf: [$ref: "#/components/schemas/Pagination"]
      type: object
      properties:
        data:
          type: array
          description: List of the current page of event statueses
          items:
            "$ref": "#/components/schemas/EventStatusResponse"
    EventTypeRequest:
      type: object
      required:
        - name
        - slug
      properties:
        name:
          type: string
          maxLength: 255
          description: A name of an event type
          example: Concert
        slug:
          type: string
          maxLength: 255
          description: A unique identifier name for the event type in kebab-case
          example: concert
        short:
          type: string
          example: An event featuring live performances
          description: A brief description of the event type
          maxLength: 255
    EventTypeResponse:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
          example: 1
        name:
          type: string
          maxLength: 255
          description: A name of an event type
          example: Concert
        slug:
          type: string
          maxLength: 255
          description: A unique identifier name for the event type in kebab-case
          example: concert
        short:
          type: string
          example: An event featuring live performances
          description: A brief description of the event type
          maxLength: 255
        created_at:
          type: string
          example: 2018-03-20T09:12:28Z
          format: date-time
          description: Date and time that the event type  was created
          readOnly: true
        updated_at:
          type: string
          example: 2018-03-20T09:12:28Z
          format: date-time
          description: Date and time that the event type was last updated
          readOnly: true
    EventTypes:
      allOf: [$ref: "#/components/schemas/Pagination"]
      type: object
      properties:
        data:
          type: array
          description: List of the current page of event types
          items:
            "$ref": "#/components/schemas/EventTypeResponse"
    Forum:
      type: object
      required:
        - name
      properties:
        id:
          type: integer
          readOnly: true
          example: 1
        name:
          type: string
          maxLength: 255
          description: A name of a forum
          example: Forum
        slug:
          type: string
          maxLength: 255
          description: A unique identifier name for the forum in kebab-case
          example: forum-slug
        short:
          type: string
          example: The short description of a forum
          description: A brief description of the forum
          maxLength: 255
        description:
          type: string
          example: An extensive breakdown of the forum
          description: An extensive breakdown of the forum
        visibility_id:
          type: integer
          readOnly: true
          example: 1
          description: Relation to the visibility table that defines the visibility of the blog
        created_at:
          type: string
          example: "2018-03-20T09:12:28Z"
          format: date-time
          description: Date and time that the entity type was created
          readOnly: true
        updated_at:
          type: string
          example: "2018-03-20T09:12:28Z"
          format: date-time
          description: Date and time that the entity type was last updated
          readOnly: true
    Forums:
      allOf: [$ref: "#/components/schemas/Pagination"]
      type: object
      properties:
        data:
          type: array
          description: List of the current page of threads
          items:
            "$ref": "#/components/schemas/Forum"
    Link:
      type: object
      required:
        - name
      properties:
        id:
          type: integer
          readOnly: true
          example: 1
        title:
          type: string
          maxLength: 255
          description: The title attribute set on the link
          example: This is the lazercrunk website.
        text:
          type: string
          maxLength: 255
          description: The display text for the link
          example: Lazercrunk Website
        url:
          type: string
          maxLength: 255
          description: A url representing a link
          example: https://lazercrunk.com
        is_primary:
          type: boolean
          description: Flag indicating that the link is primary for it's related entity
          example: true
        created_at:
          type: string
          example: "2018-03-20T09:12:28Z"
          format: date-time
          description: Date and time that the entity type was created
          readOnly: true
        updated_at:
          type: string
          example: "2018-03-20T09:12:28Z"
          format: date-time
          description: Date and time that the entity type was last updated
          readOnly: true
    Links:
      allOf: # Combines the BasicErrorModel and the inline model
        - $ref: "#/components/schemas/Pagination"
        - type: object
          properties:
            data:
              type: array
              items: { "$ref": "#/components/schemas/Link" }
    Menu:
      type: object
      required:
        - name
      properties:
        id:
          type: integer
          readOnly: true
          example: 1
        name:
          type: string
          maxLength: 255
          description: Name of the menu
          example: Main
        slug:
          type: string
          maxLength: 255
          description: A unique identifier name for the menu in kebab-case
          example: main-menu
        menu_parent_id:
          type: integer
          nullable: true
          example: 1
          description: Parent menu id
        body:
          type: string
          description: Body of the menu
          example: Menu body
        visibility_id:
          type: integer
          example: 1
          description: Relation to the visibility table
        created_at:
          type: string
          example: "2018-03-20T09:12:28Z"
          format: date-time
          description: Date and time that the menu was created
          readOnly: true
        updated_at:
          type: string
          example: "2018-03-20T09:12:28Z"
          format: date-time
          description: Date and time that the menu was last updated
          readOnly: true
    Menus:
      allOf:
        - $ref: "#/components/schemas/Pagination"
        - type: object
          properties:
            data:
              type: array
              items: { "$ref": "#/components/schemas/Menu" }

    Location:
      type: object
      required:
        - name
      properties:
        id:
          type: integer
          readOnly: true
          example: 1
        name:
          type: string
          maxLength: 255
          description: The name of the location
          example: Brillobox
        slug:
          type: string
          maxLength: 255
          description: A unique identifier name for the series in kebab-case
          example: brillobox-bar
        address_line_one:
          type: string
          maxLength: 255
          description: First line of the address
          example: 100 East Street
        address_line_two:
          type: string
          maxLength: 255
          description: Second line of the address
          example: Suite 9000
        neighborhood:
          type: string
          maxLength: 255
          description: Neighborhood the location is in
          example: Bloomfield
        city:
          type: string
          maxLength: 255
          description: City of the location
          example: Pittsburgh
        state:
          type: string
          maxLength: 5
          description: State of the location
          example: Pittsburgh
        postal_code:
          type: string
          maxLength: 15
          description: Postal code of the location
          example: 15224
        country:
          type: string
          maxLength: 64
          description: Country of the location
          example: USA
        latitude:
          type: number
          description: Latitude of the location
          example: 0.00000000
        longitude:
          type: number
          description: longitude of the location
          example: 0.00000000
        visibility:
          $ref: "#/components/schemas/Visibility"
        map_url:
          type: string
          maxLength: 128
          description: URL of the map location
          example: USA
        created_at:
          type: string
          example: "2018-03-20T09:12:28Z"
          format: date-time
          description: Date and time that the entity type was created
          readOnly: true
        updated_at:
          type: string
          example: "2018-03-20T09:12:28Z"
          format: date-time
          description: Date and time that the entity type was last updated
          readOnly: true
    LocationRequest:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
          example: 1
        name:
          type: string
          maxLength: 255
          description: The name of the location
          example: Brillobox
        slug:
          type: string
          maxLength: 255
          description: A unique identifier name for the series in kebab-case
          example: brillobox-bar
        address_line_one:
          type: string
          maxLength: 255
          description: First line of the address
          example: 100 East Street
        address_line_two:
          type: string
          maxLength: 255
          description: Second line of the address
          example: Suite 9000
        neighborhood:
          type: string
          maxLength: 255
          description: Neighborhood the location is in
          example: Bloomfield
        city:
          type: string
          maxLength: 255
          description: City of the location
          example: Pittsburgh
        state:
          type: string
          maxLength: 5
          description: State of the location
          example: Pittsburgh
        postal_code:
          type: string
          maxLength: 15
          description: Postal code of the location
          example: 15224
        country:
          type: string
          maxLength: 64
          description: Country of the location
          example: USA
        latitude:
          type: number
          description: Latitude of the location
          example: 0.00000000
        longitude:
          type: number
          description: longitude of the location
          example: 0.00000000
        visibility_id:
          type: integer
          description: Type of visibility
          example: 1
        locatoin_type_id:
          type: integer
          description: Type of location
          example: 1
        map_url:
          type: string
          maxLength: 128
          description: URL of the map location
          example: USA
        created_at:
          type: string
          example: "2018-03-20T09:12:28Z"
          format: date-time
          description: Date and time that the entity type was created
          readOnly: true
        updated_at:
          type: string
          example: "2018-03-20T09:12:28Z"
          format: date-time
          description: Date and time that the entity type was last updated
          readOnly: true
    OccurrenceDay:
      type: object
      required:
        - name
      properties:
        id:
          type: integer
          readOnly: true
          example: 1
        name:
          type: string
          maxLength: 255
          description: A name of an occurrence day
          example: Group
        slug:
          type: string
          maxLength: 255
          description: A unique identifier name for the occurrence day in kebab-case
          example: octobers-lazercrunk-at-the-brillobox
        short:
          type: string
          example: A multi-member occurrence
          description: A brief description of the occurrence day
          maxLength: 255
        created_at:
          type: string
          example: "2018-03-20T09:12:28Z"
          format: date-time
          description: Date and time that the occurrence day was created
          readOnly: true
        updated_at:
          type: string
          example: "2018-03-20T09:12:28Z"
          format: date-time
          description: Date and time that the occurrence day was last updated
          readOnly: true
    OccurrenceType:
      type: object
      required:
        - name
      properties:
        id:
          type: integer
          readOnly: true
          example: 1
        name:
          type: string
          maxLength: 255
          description: A name of an occurrence type
          example: Group
        slug:
          type: string
          maxLength: 255
          description: A unique identifier name for the occurrence type in kebab-case
          example: octobers-lazercrunk-at-the-brillobox
        short:
          type: string
          example: A multi-member occurrence
          description: A brief description of the occurrence type
          maxLength: 255
        created_at:
          type: string
          example: "2018-03-20T09:12:28Z"
          format: date-time"
          description: Date and time that the occurrence type was created
          readOnly: true
        updated_at:
          type: string
          example: "2018-03-20T09:12:28Z"
          format: date-time
          description: Date and time that the occurrence type was last updated
          readOnly: true
    OccurrenceWeek:
      type: object
      required:
        - name
      properties:
        id:
          type: integer
          readOnly: true
          example: 1
        name:
          type: string
          maxLength: 255
          description: A name of an occurrence week
          example: Group
        slug:
          type: string
          maxLength: 255
          description: A unique identifier name for the occurrence week in kebab-case
          example: octobers-lazercrunk-at-the-brillobox
        short:
          type: string
          example: A multi-member occurrence
          description: A brief description of the occurrence week
          maxLength: 255
        created_at:
          type: string
          example: "2018-03-20T09:12:28Z"
          format: date-time
          description: Date and time that the occurrence week was created
          readOnly: true
        updated_at:
          type: string
          example: "2018-03-20T09:12:28Z"
          format: date-time
          description: Date and time that the occurrence week was last updated
          readOnly: true
    OccurrenceTypes:
      allOf: [$ref: "#/components/schemas/Pagination"]
      type: object
      properties:
        data:
          type: array
          description: List of the current page of occurrence types
          items:
            "$ref": "#/components/schemas/OccurrenceType"
    OccurrenceWeeks:
      allOf: [$ref: "#/components/schemas/Pagination"]
      type: object
      properties:
        data:
          type: array
          description: List of the current page of occurrence weeks
          items:
            "$ref": "#/components/schemas/OccurrenceWeek"
    OccurrenceDays:
      allOf: [$ref: "#/components/schemas/Pagination"]
      type: object
      properties:
        data:
          type: array
          description: List of the current page of occurrence days
          items:
            "$ref": "#/components/schemas/OccurrenceDay"
    Post:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
          example: 1
        name:
          type: string
          maxLength: 255
          description: A name of a thread
          example: Forum
        slug:
          type: string
          maxLength: 255
          description: A unique identifier name for the post in kebab-case
          example: post-slug
        description:
          type: string
          example: An extensive breakdown of the post
          description: An extensive breakdown of the post
        visibility_id:
          type: integer
          readOnly: true
          example: 1
          description: Relation to the visibility table that defines the visibility of the post
        thread_id:
          type: integer
          readOnly: true
          example: 1
          description: Relation to the thread table that defines the thread of the post
        created_at:
          type: string
          example: "2018-03-20T09:12:28Z"
          format: date-time
          description: Date and time that the entity type was created
          readOnly: true
    Posts:
      allOf: [$ref: "#/components/schemas/Pagination"]
      type: object
      properties:
        data:
          type: array
          description: List of the current page of posts
          items:
            "$ref": "#/components/schemas/Post"
    SeriesRequest:
      type: object
      required:
        - id
        - name
        - slug
      properties:
        id:
          type: integer
          readOnly: true
          example: 1
        name:
          type: string
          example: Lazercrunk, First Fridays of the Month
          description: The cannonical name of the series
          maxLength: 255
        slug:
          type: string
          maxLength: 255
          description: A unique identifier name for the series in kebab-case
          example: lazercrunk-first-fridays-of-the-month
        short:
          type: string
          example: a really fun monthly dj night featuring performers from around the world
          description: A brief description of the series
          maxLength: 255
        visibility_id:
          type: integer
          readOnly: true
          example: 1
          description: Relation to the visibility table that defines the visibility of series
        description:
          type: string
          description: Full description of the series
          example: a really fun monthly dj night featuring performers from around the world and locally playing new electronic music
          maxLength: 65535
        event_type_id:
          type: integer
          readOnly: true
          example: 1
          description: Relation to the event type table that defines the type of series
        occurrence_type_id:
          type: integer
          readOnly: true
          example: 1
          description: Relation to the occurrence type table that defines the type of occurrence
        occurrence_week_id:
          type: integer
          readOnly: true
          example: 1
          description: Relation to the occurrence week table that defines the occurrence week of the month
        occurrence_day_id:
          type: integer
          readOnly: true
          example: 1
          description: Relation to the occurrence day table that defines the occurrence day of the week
        hold_date:
          type: boolean
          description: Flag indicating that there is a request to hold this date open
          example: true
        promoter_id:
          type: integer
          readOnly: true
          example: 1
          description: Relation to the entity table that defines the promoter for the series
        venue_id:
          type: integer
          readOnly: true
          example: 1
          description: Relation to the entity table that defines the venue for the series
        is_benefit:
          type: boolean
          description: Flag indicating if the series is a benefit
          example: true
        attending:
          description: The number of users who marked that they are attending the series
          type: integer
          example: 10
        like:
          description: The number of users who marked that they like the series
          type: integer
          example: 10
        presale_price:
          description: The price for a presale price for the series
          type: number
          example: 9.99
        door_price:
          description: The price of the show at the door
          type: number
          example: 19.99
        soundcheck_at:
          type: string
          example: "2018-03-20T09:12:28Z"
          format: date-time
          description: Date and time that the series soundcheck is scheduled
        door_at:
          type: string
          example: "2018-03-20T09:12:28Z"
          format: date-time
          description: Date and time that the series doors are scheduled to open
        start_at:
          type: string
          example: "2018-03-20T09:12:28Z"
          format: date-time
          description: Date and time that the series starts
        end_at:
          type: string
          example: "2018-03-20T09:12:28Z"
          format: date-time
          description: Date and time that the series ends
        min_age:
          description: The minimum age requirement for the series in years
          type: integer
          example: 21
        primary_link:
          type: string
          description: The primary URL related to this series
          example: http://lazercrunk.com/october-2022
          maxLength: 255
        ticket_link:
          type: string
          description: The URL for buying a ticket to the series
          example: http://lazercrunk.com/october-2022/tickets
          maxLength: 255
        created_at:
          type: string
          example: "2018-03-20T09:12:28Z"
          format: date-time
          description: Date and time that the series was created
        updated_at:
          type: string
          example: "2018-03-20T09:12:28Z"
          format: date-time
          description: Date and time that the series was last updated
        cancelled_at:
          type: string
          example: "2018-03-20T09:12:28Z"
          format: date-time
          description: Date and time that the series was cancelled
        created_by:
          type: integer
          readOnly: true
          example: 1
          description: Relation to the user table that defines the user who created the series
        updated_by:
          type: integer
          readOnly: true
          example: 1
          description: Relation to the user table that defines the user who last updated the series
        tag_list:
          type: array
          items: { "type": "integer" }
        entity_list:
          type: array
          items: { "type": "integer" }
    SeriesResponse:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
          example: 1
        name:
          type: string
          example: Lazercrunk, First Fridays of the Month
          description: The cannonical name of the series
          maxLength: 255
        slug:
          type: string
          maxLength: 255
          description: A unique identifier name for the series in kebab-case
          example: lazercrunk-first-fridays-of-the-month
        short:
          type: string
          example: a really fun monthly dj night featuring performers from around the world
          description: A brief description of the series
          maxLength: 255
        visibility:
          $ref: "#/components/schemas/Visibility"
        description:
          type: string
          description: Full description of the series
          example: a really fun monthly dj night featuring performers from around the world and locally playing new electronic music
          maxLength: 65535
        event_type:
          $ref: "#/components/schemas/EventTypeResponse"
        occurrence_type:
          $ref: "#/components/schemas/OccurrenceType"
        occurrence_week:
          $ref: "#/components/schemas/OccurrenceWeek"
        occurrence_day:
          $ref: "#/components/schemas/OccurrenceDay"
        hold_date:
          type: boolean
          description: Flag indicating that there is a request to hold this date open
          example: true
        promoter_id:
          type: integer
          readOnly: true
          example: 1
          description: Relation to the entity table that defines the promoter of the series
        venue_id:
          type: integer
          readOnly: true
          example: 1
          description: Relation to the entity table that defines the venue for the series
        is_benefit:
          type: boolean
          description: Flag indicating if the series is a benefit
          example: true
        attending:
          description: The number of users who marked that they are attending the series
          type: integer
          example: 10
        like:
          description: The number of users who marked that they like the series
          type: integer
          example: 10
        presale_price:
          description: The price for a presale price for the series
          type: number
          example: 9.99
        door_price:
          description: The price of the show at the door
          type: number
          example: 19.99
        soundcheck_at:
          type: string
          example: "2018-03-20T09:12:28Z"
          format: date-time
          description: Date and time that the series soundcheck is scheduled
        door_at:
          type: string
          example: "2018-03-20T09:12:28Z"
          format: date-time
          description: Date and time that the series doors are scheduled to open
        start_at:
          type: string
          example: "2018-03-20T09:12:28Z"
          format: date-time
          description: Date and time that the series starts
        end_at:
          type: string
          example: "2018-03-20T09:12:28Z"
          format: date-time
          description: Date and time that the series starts
        min_age:
          description: The minimum age requirement for the series in years
          type: integer
          example: 21
        primary_link:
          type: string
          description: The primary URL related to this series
          example: http://lazercrunk.com/october-2022
          maxLength: 255
        ticket_link:
          type: string
          description: The URL for buying a ticket to the series
          example: http://lazercrunk.com/october-2022/tickets
          maxLength: 255
        created_at:
          type: string
          example: "2018-03-20T09:12:28Z"
          format: date-time
          description: Date and time that the series was created
        updated_at:
          type: string
          example: "2018-03-20T09:12:28Z"
          format: date-time
          description: Date and time that the series was last updated
        cancelled_at:
          type: string
          example: "2018-03-20T09:12:28Z"
          format: date-time
          description: Date and time that the series was cancelled
        created_by:
          $ref: "#/components/schemas/UserSimple"
        updated_by:
          $ref: "#/components/schemas/UserSimple"
    Seriess:
      allOf: [$ref: "#/components/schemas/Pagination"]
      type: object
      properties:
        data:
          type: array
          description: List of the current page of series
          items:
            "$ref": "#/components/schemas/SeriesResponse"
    Tag:
      type: object
      required:
        - name
        - tag_type_id
      properties:
        id:
          type: integer
          readOnly: true
          example: 1
        name:
          type: string
          description: Name of the tag
          example: post punk
          maxLength: 255
        slug:
          type: string
          maxLength: 255
          description: A unique identifier name for the tag in kebab-case
          example: post-punk
        tag_type_id:
          type: integer
          readOnly: true
          example: 1
          description: Relation to the tag type table that defines the type of tag
        created_at:
          type: string
          example: "2018-03-20T09:12:28Z"
          format: date-time
          description: Date and time that the tag was created
          readOnly: true
        updated_at:
          type: string
          example: "2018-03-20T09:12:28Z"
          format: date-time
          description: Date and time that the tag was last updated
          readOnly: true
    Tags:
      allOf: # Combines the BasicErrorModel and the inline model
        - $ref: "#/components/schemas/Pagination"
        - type: object
          properties:
            data:
              type: array
              items: { "$ref": "#/components/schemas/Tag" }
    Role:
      type: object
      required:
        - name
        - slug
      properties:
        id:
          type: integer
          readOnly: true
          example: 1
        name:
          type: string
          maxLength: 255
          description: Name of the role
          example: Venue
        slug:
          type: string
          maxLength: 255
          description: A unique identifier name for the role in kebab-case
          example: venue
        short:
          type: string
          maxLength: 255
          description: A brief description of the role
          example: Event promoter
        created_at:
          type: string
          example: "2018-03-20T09:12:28Z"
          format: date-time
          description: Date and time that the role was created
          readOnly: true
        updated_at:
          type: string
          example: "2018-03-20T09:12:28Z"
          format: date-time
          description: Date and time that the role was last updated
          readOnly: true
    RoleRequest:
      type: object
      required:
        - name
        - slug
      properties:
        name:
          type: string
          maxLength: 255
          description: Name of the role
          example: Venue
        slug:
          type: string
          maxLength: 255
          description: A unique identifier name for the role in kebab-case
          example: venue
        short:
          type: string
          maxLength: 255
          description: A brief description of the role
          example: Event promoter
    Roles:
      allOf: [$ref: "#/components/schemas/Pagination"]
      type: object
      properties:
        data:
          type: array
          description: List of the current page of roles
          items:
            "$ref": "#/components/schemas/Role"
    Thread:
      type: object
      required:
        - name
      properties:
        id:
          type: integer
          readOnly: true
          example: 1
        name:
          type: string
          maxLength: 255
          description: A name of a thread
          example: Forum
        slug:
          type: string
          maxLength: 255
          description: A unique identifier name for the thread in kebab-case
          example: thread-slug
        description:
          type: string
          example: An extensive breakdown of the thread
          description: An extensive breakdown of the thread
        visibility_id:
          type: integer
          readOnly: true
          example: 1
          description: Relation to the visibility table that defines the visibility of the thread
        forum_id:
          type: integer
          readOnly: true
          example: 1
          description: Relation to the forum table that defines the forum of the thread
        created_at:
          type: string
          example: "2018-03-20T09:12:28Z"
          format: date-time
          description: Date and time that the entity type was created
          readOnly: true
        updated_at:
          type: string
          example: "2018-03-20T09:12:28Z"
          format: date-time
          description: Date and time that the entity type was last updated
          readOnly: true
    Threads:
      allOf: [$ref: "#/components/schemas/Pagination"]
      type: object
      properties:
        data:
          type: array
          description: List of the current page of threads
          items:
            "$ref": "#/components/schemas/Thread"
    ProfileResponse:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
          example: 1
        user_id:
          type: integer
          example: 1
          description: Relation to the user table that owns the profile
        bio:
          type: string
          maxLength: 65535
          description: User provided biography text
          example: Pittsburgh based DJ and promoter
        alias:
          type: string
          maxLength: 255
          description: Alternate display name for the profile
          example: cutups
        location:
          type: string
          maxLength: 255
          description: Displayed location for the user
          example: Pittsburgh, PA
        visibility_id:
          type: integer
          example: 1
          description: Relation to the visibility table that defines the visibility of the profile
        facebook_username:
          type: string
          maxLength: 64
          example: cutups
        twitter_username:
          type: string
          maxLength: 64
          example: cutups
        instagram_username:
          type: string
          maxLength: 64
          example: cutups
        first_name:
          type: string
          maxLength: 255
          example: Geoff
        last_name:
          type: string
          maxLength: 255
          example: Maddock
        default_theme:
          type: string
          maxLength: 255
          example: dark
        setting_weekly_update:
          type: integer
          example: 1
        setting_daily_update:
          type: integer
          example: 1
        setting_instant_update:
          type: integer
          example: 1
        setting_forum_update:
          type: integer
          example: 1
        setting_public_profile:
          type: integer
          example: 1
        created_at:
          type: string
          example: "2018-03-20T09:12:28Z"
          format: date-time
        updated_at:
          type: string
          example: "2018-03-20T09:12:28Z"
          format: date-time
        links:
          type: array
          items: { "$ref": "#/components/schemas/Link" }
        photos:
          type: array
          items: { "$ref": "#/components/schemas/PhotoResponse" }
    User:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
          example: 1
        name:
          type: string
          description: Name of the user
          example: john.smith
          maxLength: 255
        password:
          type: string
          description: Encrypted password of the user
          example: abcdefg
          maxLength: 60
        email:
          type: string
          description: Email address of the user
          example: john.smith@gmail.com
          maxLength: 255
        user_status_id:
          type: integer
          readOnly: true
          example: 1
          description: Relation to the user status table that defines the status of the user
        remember_token:
          type: string
          description: Token used to remember the user's logged in status
          example: ABCDEFGHI
          maxLength: 100
        email_verified_at:
          type: string
          example: "2018-03-20T09:12:28Z"
          format: date-time
          description: Date and time that the user's email was verified
          readOnly: true
        created_at:
          type: string
          example: "2018-03-20T09:12:28Z"
          format: date-time
          description: Date and time that the user was created
          readOnly: true
        updated_at:
          type: string
          example: "2018-03-20T09:12:28Z"
          format: date-time
          description: Date and time that the user was last updated
          readOnly: true
        profile:
          $ref: "#/components/schemas/ProfileResponse"
        followed_tags:
          type: array
          items: { "$ref": "#/components/schemas/Tag" }
        followed_entities:
          type: array
          items: { "$ref": "#/components/schemas/EntityResponse" }
        followed_series:
          type: array
          items: { "$ref": "#/components/schemas/SeriesResponse" }
        followed_threads:
          type: array
          items: { "$ref": "#/components/schemas/Thread" }
    UserSimple:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
          example: 1
        name:
          type: string
          description: Name of the user
          example: john.smith
          maxLength: 255
        email:
          type: string
          description: Email address of the user
          example: john.smith@gmail.com
          maxLength: 255
    MinimalUser:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
          example: 1
        username:
          type: string
          description: Name of the user
          example: john.smith
          maxLength: 255
    UserResponse:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
          example: 1
        name:
          type: string
          description: Name of the user
          example: john.smith
          maxLength: 255
        password:
          type: string
          description: Encrypted password of the user
          example: abcdefg
          maxLength: 60
        email:
          type: string
          description: Email address of the user
          example: john.smith@gmail.com
          maxLength: 255
        user_status_id:
          type: integer
          readOnly: true
          example: 1
          description: Relation to the user status table that defines the status of the user
        remember_token:
          type: string
          description: Token used to remember the user's logged in status
          example: ABCDEFGHI
          maxLength: 100
        email_verified_at:
          type: string
          example: "2018-03-20T09:12:28Z"
          format: date-time
          description: Date and time that the user's email was verified
          readOnly: true
        created_at:
          type: string
          example: "2018-03-20T09:12:28Z"
          format: date-time
          description: Date and time that the user was created
          readOnly: true
        updated_at:
          type: string
          example: "2018-03-20T09:12:28Z"
          format: date-time
          description: Date and time that the user was last updated
          readOnly: true
    UserRequest:
      type: object
      required:
        - name
        - email
        - password
      properties:
        name:
          type: string
          description: Name of the user
          example: john.smith
          maxLength: 255
        password:
          type: string
          description: Encrypted password of the user
          example: abcdefg
          maxLength: 60
        email:
          type: string
          description: Email address of the user
          example: john.smith@gmail.com
          maxLength: 255
        user_status_id:
          type: integer
          readOnly: true
          example: 1
          description: Relation to the user status table that defines the status of the user
        remember_token:
          type: string
          description: Token used to remember the user's logged in status
          example: ABCDEFGHI
          maxLength: 100
    Users:
      allOf: # Combines the BasicErrorModel and the inline model
        - $ref: "#/components/schemas/Pagination"
        - type: object
          properties:
            data:
              type: array
              items: { "$ref": "#/components/schemas/UserResponse" }
    UserTokenRequest:
      type: object
      properties:
        token_name:
          type: string
          description: User token name
          example: arcane-city
          maxLength: 255
    UserTokenResponse:
      type: object
      properties:
        token:
          type: string
          description: Valid user token
          example: ABCDEF12345
          maxLength: 255
    Visibility:
      type: object
      required:
        - name
      properties:
        id:
          type: integer
          readOnly: true
          example: 1
        name:
          type: string
          example: Public
        created_at:
          type: string
          example: "2018-03-20T09:12:28Z"
          format: date-time
          description: Date and time that the visibility was created
          readOnly: true
        updated_at:
          type: string
          example: "2018-03-20T09:12:28Z"
          format: date-time
          description: Date and time that the visibility was last updated
          readOnly: true
    Visibilities:
      allOf: [$ref: "#/components/schemas/Pagination"]
      type: object
      properties:
        data:
          type: array
          description: List of the current page of visibilities
          items:
            "$ref": "#/components/schemas/Visibility"
    Error:
      type: object
      required:
        - message
      properties:
        message:
          description: A human readable error message
          type: string
    Pagination:
      type: object
      properties:
        current_page:
          description: The current page in the paginated list
          type: integer
        first_page_url:
          description: URL for the first page
          type: string
          example: "https://dev.arcane.city/api/resources?page=1"
        from:
          description: First element in the current page
          type: integer
          example: 1
        last_page:
          description: Last page of results
          type: integer
          example: 1
        last_page_url:
          description: URL for the first page
          type: string
          example: "https://dev.arcane.city/api/resources?page=100"
        links:
          description: Array of links used to paginate the list of entities
          type: array
          items: {}
        next_page_url:
          description: URL for the next page
          type: string
          example: "https://dev.arcane.city/api/resources?page=2"
        path:
          description: Path for the primary route
          type: string
          example: "https://dev.arcane.city/api/resources"
        per_page:
          description: Number of results per page
          type: integer
          example: 25
        prev_page_url:
          description: URL for the previous page
          type: string
          example: "https://dev.arcane.city/api/resources?page=0"
        to:
          description: Last element in the current page
          type: integer
          example: 25
        total:
          description: Total number of results from the request
          type: integer
          example: 100
        data:
          description: List of the current page of the paginated entity
          type: array
          items: {}
security:
  - basicAuth: []
paths:
  /api/activities:
    get:
      tags:
        - activities
      summary: Get Activities
      operationId: getActivities
      parameters:
        - name: filters[user_id]
          in: query
          required: false
          description: A filter query of the activity user id
          schema:
            type: integer
            example: 1
        - name: filters[object_id]
          in: query
          required: false
          description: A filter query of the activity object id
          schema:
            type: integer
            example: 1
        - name: filters[object_table]
          in: query
          required: false
          description: A filter query of the activity object table
          schema:
            type: string
            example: Event
        - name: filters[message]
          in: query
          required: false
          description: A filter query of the activity message
          schema:
            type: string
            example: Activity Message
        - name: limit
          in: query
          required: false
          description: The limit on the number of results to return per page
          schema:
            type: integer
            example: 25
        - name: page
          in: query
          required: false
          description: The page number to return
          schema:
            type: integer
            example: 1
        - name: sort
          in: query
          required: false
          description: A column to be used to sort the query
          schema:
            type: string
            example: id
        - name: direction
          in: query
          required: false
          description: A string indicating the sort direction of the query (asc or desc)
          schema:
            type: string
            example: asc
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pagination"
  /api/activities/{id}:
    get:
      parameters:
        - name: id
          description: The unique identifier of the activity
          in: path
          required: true
          schema:
            description: The unique identifier of an activity
            type: string
            readOnly: true
            example: about-arcane-city
      tags:
        - activities
      summary: Get Activity
      operationId: getActivityById
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Activity"
  /api/blogs:
    get:
      tags:
        - blogs
      summary: Get Blogs
      operationId: getBlogs
      parameters:
        - name: filters[name]
          in: query
          required: false
          description: A filter query of the blog name
          schema:
            type: string
            example: Blog Title
        - name: limit
          in: query
          required: false
          description: The limit on the number of results to return per page
          schema:
            type: integer
            example: 25
        - name: page
          in: query
          required: false
          description: The page number to return
          schema:
            type: integer
            example: 1
        - name: sort
          in: query
          required: false
          description: A column to be used to sort the query
          schema:
            type: string
            example: name
        - name: direction
          in: query
          required: false
          description: A string indicating the sort direction of the query (asc or desc)
          schema:
            type: string
            example: asc
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pagination"
    post:
      tags:
        - blogs
      summary: Create blog
      operationId: createBlog
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Blog"
      responses:
        "201":
          description: Successful response
          content:
            application/json: {}
  /api/blogs/{slug}:
    get:
      parameters:
        - name: slug
          description: The unique identifier of the blog
          in: path
          required: true
          schema:
            description: The unique identifier of an blog
            type: string
            readOnly: true
            example: about-arcane-city
      tags:
        - blogs
      summary: Get Blog
      operationId: getBlogById
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Blog"
    put:
      parameters:
        - name: slug
          description: The unique identifier of the blog
          in: path
          required: true
          schema:
            description: The unique identifier of a blog
            type: string
            readOnly: true
            example: about-arcane-city
      tags:
        - blogs
      summary: Update Blog
      operationId: updateBlogById
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Blog"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Blog"
    delete:
      parameters:
        - name: slug
          description: The unique identifier of the blog
          in: path
          required: true
          schema:
            description: The unique identifier of a blog
            type: string
            readOnly: true
            example: about-arcane-city
      tags:
        - blogs
      summary: Delete Blog
      operationId: deleteBlogById
      responses:
        "201":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PhotoResponse"
  /api/events:
    post:
      tags:
        - events
      summary: Create Event
      operationId: createEvent
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EventRequest"
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EventResponse"
        201:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EventResponse"
        500:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    get:
      tags:
        - events
      summary: Get Events
      operationId: getEvents
      parameters:
        - name: filters[name]
          in: query
          required: false
          description: A filter query of the event name
          schema:
            type: string
            example: "Lazercrunk"
        - name: filters[venue]
          in: query
          required: false
          description: A filter query of the venue name
          schema:
            type: string
            example: "Brillobox"
        - name: filters[promoter]
          in: query
          required: false
          description: A filter query of the promoter name
          schema:
            type: string
            example: "Cutups"
        - name: filters[related]
          in: query
          required: false
          description: A filter query of related entity name
          schema:
            type: string
            example: "0h85"
        - name: filters[series]
          in: query
          required: false
          description: A filter query of related series name
          schema:
            type: string
            example: "Lazercrunk"
        - name: filters[event_type]
          in: query
          required: false
          description: A filter query of related event type name
          schema:
            type: string
            example: "Concert"
        - name: filters[start_at][start]
          in: query
          required: false
          description: A filter query of the start time starting
          schema:
            type: string
            example: "2022-01-01 1:00:00"
        - name: filters[start_at][end]
          in: query
          required: false
          description: A filter query of the start time ending
          schema:
            type: string
            example: "2022-02-01 2:00:00"
        - name: filters[end_at][start]
          in: query
          required: false
          description: A filter query of the end time starting
          schema:
            type: string
            example: "2022-02-01 1:00:00"
        - name: filters[end_at][end]
          in: query
          required: false
          description: A filter query of the end time ending
          schema:
            type: string
            example: "2022-01-01 2:00:00"
        - name: filters[ages]
          in: query
          required: false
          description: A filter query of the end time ending
          schema:
            type: integer
            example: 21
        - name: filters[tag]
          in: query
          required: false
          description: A filter query of the event tags
          schema:
            type: string
            example: "electronic"
        - name: limit
          in: query
          required: false
          description: The limit on the number of results to return per page
          schema:
            type: integer
            example: 25
        - name: page
          in: query
          required: false
          description: The page number to return
          schema:
            type: integer
            example: 1
        - name: sort
          in: query
          required: false
          description: A column to be used to sort the query
          schema:
            type: string
            example: name
        - name: direction
          in: query
          required: false
          description: A string indicating the sort direction of the query (asc or desc)
          schema:
            type: string
            example: asc
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Events"
  /api/events/attending:
    get:
      parameters:
        - name: filters[name]
          in: query
          required: false
          description: A filter query of the event name
          schema:
            type: string
            example: "Lazercrunk"
        - name: filters[venue]
          in: query
          required: false
          description: A filter query of the venue name
          schema:
            type: string
            example: "Brillobox"
        - name: filters[promoter]
          in: query
          required: false
          description: A filter query of the promoter name
          schema:
            type: string
            example: "Cutups"
        - name: filters[related]
          in: query
          required: false
          description: A filter query of related entity name
          schema:
            type: string
            example: "0h85"
        - name: filters[series]
          in: query
          required: false
          description: A filter query of related series name
          schema:
            type: string
            example: "Lazercrunk"
        - name: filters[event_type]
          in: query
          required: false
          description: A filter query of related event type name
          schema:
            type: string
            example: "Concert"
        - name: filters[start_at][start]
          in: query
          required: false
          description: A filter query of the start time starting
          schema:
            type: string
            example: "2022-01-01 1:00:00"
        - name: filters[start_at][end]
          in: query
          required: false
          description: A filter query of the start time ending
          schema:
            type: string
            example: "2022-02-01 2:00:00"
        - name: filters[end_at][start]
          in: query
          required: false
          description: A filter query of the end time starting
          schema:
            type: string
            example: "2022-02-01 1:00:00"
        - name: filters[end_at][end]
          in: query
          required: false
          description: A filter query of the end time ending
          schema:
            type: string
            example: "2022-01-01 2:00:00"
        - name: filters[ages]
          in: query
          required: false
          description: A filter query of the end time ending
          schema:
            type: integer
            example: 21
        - name: filters[tag]
          in: query
          required: false
          description: A filter query of the event tags
          schema:
            type: string
            example: "electronic"
        - name: limit
          in: query
          required: false
          description: The limit on the number of results to return per page
          schema:
            type: integer
            example: 25
        - name: page
          in: query
          required: false
          description: The page number to return
          schema:
            type: integer
            example: 1
        - name: sort
          in: query
          required: false
          description: A column to be used to sort the query
          schema:
            type: string
            example: name
        - name: direction
          in: query
          required: false
          description: A string indicating the sort direction of the query (asc or desc)
          schema:
            type: string
            example: asc
      tags:
        - events
      summary: Get Events the Authenticated User is Attending
      operationId: getAttendingEvents
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Events"
  /api/events/by-date/{year}:
    get:
      parameters:
        - name: year
          description: The year of events to return
          in: path
          required: true
          schema:
            type: string
            example: "2012"
      tags:
        - events
      summary: Get Events by Year
      operationId: getEventByYear
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EventResponse"
  /api/events/by-date/{year}/{month}:
    get:
      parameters:
        - name: year
          description: The year of events to return
          in: path
          required: true
          schema:
            type: string
            example: "2012"
        - name: month
          description: The month of events to return
          in: path
          required: true
          schema:
            type: string
            example: "01"
      tags:
        - events
      summary: Get Events by Year and Month
      operationId: getEventByDate
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EventResponse"
  /api/events/by-date/{year}/{month}/{day}:
    get:
      parameters:
        - name: year
          description: The year of events to return
          in: path
          required: true
          schema:
            type: string
            example: "2012"
        - name: month
          description: The month of events to return
          in: path
          required: true
          schema:
            type: string
            example: "01"
        - name: day
          description: The day of events to return
          in: path
          required: true
          schema:
            type: string
            example: "01"
      tags:
        - events
      summary: Get Events by Date
      operationId: getEventByDate
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EventResponse"
  /api/events/{slug}:
    get:
      parameters:
        - name: slug
          description: The unique identifier of the entity
          in: path
          required: true
          schema:
            type: string
            example: "cutups-event"
      tags:
        - events
      summary: Get Event
      operationId: getEventById
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EventResponse"
    put:
      parameters:
        - name: slug
          description: A unique string identifier of the event
          in: path
          required: true
          schema:
            type: string
            readOnly: true
            example: "cutups-event"
      tags:
        - events
      summary: Update Events
      operationId: updateEventById
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EventRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EventResponse"
    delete:
      parameters:
        - name: slug
          description: A unique string identifier of the event
          in: path
          required: true
          example: 1
          schema:
            type: string
            readOnly: true
            example: cutups-event
      tags:
        - events
      summary: Delete Event
      operationId: deleteEventById
      responses:
        "201":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PhotoResponse"
  /api/events/{slug}/embeds:
    get:
      parameters:
        - name: slug
          description: The unique identifier of the event
          in: path
          required: true
          schema:
            type: string
            readOnly: true
            example: "lazercrunk"
      tags:
        - events
      summary: Get Event Embeds
      operationId: getEventEmbedsBySlug
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Embeds"
  /api/events/{slug}/minimal-embeds:
    get:
      parameters:
        - name: slug
          description: The unique identifier of the event
          in: path
          required: true
          schema:
            type: string
            readOnly: true
            example: "lazercrunk"
      tags:
        - events
      summary: Get Event MinimalEmbeds
      operationId: getEventMinimalEmbedsBySlug
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Embeds"
  /api/events/{slug}/photos:
    get:
      parameters:
        - name: slug
          description: The unique identifier of the entity
          in: path
          required: true
          schema:
            type: string
            readOnly: true
            example: "strobe"
      tags:
        - events
      summary: Get Events Photos
      operationId: getEventPhotosBySlug
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Photos"
  /api/events/{slug}/all-photos:
    get:
      parameters:
        - name: slug
          description: The unique identifier of the event
          in: path
          required: true
          schema:
            type: string
            readOnly: true
            example: "strobe"
      tags:
        - events
      summary: Get All Related Events Photos
      operationId: getAllEventPhotosBySlug
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Photos"
  /api/events/{id}/photos:
    post:
      parameters:
        - name: id
          description: The unique identifier of the event
          in: path
          required: true
          schema:
            type: integer
            readOnly: true
            example: 1
      tags:
        - events
      summary: Add Event Photo
      operationId: addEventPhotoById
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        "201":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PhotoResponse"
  /api/events/{slug}/attend:
    post:
      parameters:
        - name: slug
          description: The unique identifier of the event
          in: path
          required: true
          schema:
            type: string
            readOnly: true
            example: lazercrunk
      tags:
        - events
      summary: Attend Event
      operationId: attendEventBySlug
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EventResponse"
    delete:
      parameters:
        - name: slug
          description: The unique identifier of the event
          in: path
          required: true
          schema:
            type: string
            readOnly: true
            example: lazercrunk
      tags:
        - events
      summary: Unattend Event
      operationId: unattendEventBySlug
      responses:
        "204":
          description: Successful response
          content:
            application/json: {}
  /api/entities:
    post:
      tags:
        - entities
      summary: Create Entity
      operationId: createEntity
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EntityRequest"
      responses:
        "201":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityResponse"
    get:
      tags:
        - entities
      summary: Get Entities
      operationId: getEntities
      parameters:
        - name: filters[name]
          in: query
          required: false
          description: A filter query of the entity name
          schema:
            type: string
            example: "cutups"
        - name: filters[role]
          in: query
          required: false
          description: A filter query of the role name
          schema:
            type: string
            example: "dj"
        - name: filters[tag]
          in: query
          required: false
          description: A filter query of related tag
          schema:
            type: string
            example: "jungle"
        - name: filters[entity_status]
          in: query
          required: false
          description: A filter query of related entity status name
          schema:
            type: string
            example: "Active"
        - name: filters[entity_type]
          in: query
          required: false
          description: A filter query of related entity type name
          schema:
            type: string
            example: "Individual"
        - name: limit
          in: query
          required: false
          description: The limit on the number of results to return per page
          schema:
            type: integer
            example: 25
        - name: page
          in: query
          required: false
          description: The page number to return
          schema:
            type: integer
            example: 1
        - name: sort
          in: query
          required: false
          description: A column to be used to sort the query
          schema:
            type: string
            example: name
        - name: direction
          in: query
          required: false
          description: A string indicating the sort direction of the query (asc or desc)
          schema:
            type: string
            example: asc
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Entities"
  /api/entities/{slug}:
    get:
      parameters:
        - name: slug
          description: The unique identifier of the entity
          in: path
          required: true
          schema:
            type: string
          example: cutups
      tags:
        - entities
      summary: Get Entity
      operationId: getEntityBySlug
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityResponse"
    put:
      parameters:
        - name: slug
          description: The unique identifier of the entity
          in: path
          required: true
          schema:
            type: string
            example: "cutups"
      tags:
        - entities
      summary: Update Entity
      operationId: updateEntityBySlug
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EntityRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityResponse"
    delete:
      parameters:
        - name: slug
          description: The unique identifier of the entity
          in: path
          required: true
          schema:
            type: string
            example: "strobe"
      tags:
        - entities
      summary: Delete Entity
      operationId: deleteEntityBySlug
      responses:
        "204":
          description: Successful response
          content:
            application/json: {}
  /api/entities/{slug}/embeds:
    get:
      parameters:
        - name: slug
          description: The unique identifier of the entity
          in: path
          required: true
          schema:
            type: string
            readOnly: true
            example: "strobe"
      tags:
        - entities
      summary: Get Entity Embeds
      operationId: getEntityEmbedsBySlug
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Embeds"
  /api/entities/{slug}/minimal-embeds:
    get:
      parameters:
        - name: slug
          description: The unique identifier of the entity
          in: path
          required: true
          schema:
            type: string
            readOnly: true
            example: "strobe"
      tags:
        - entities
      summary: Get Entity MinimalEmbeds
      operationId: getEntityMinimalEmbedsBySlug
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Embeds"
  /api/entities/{slug}/photos:
    get:
      parameters:
        - name: slug
          description: The unique identifier of the entity
          in: path
          required: true
          schema:
            type: string
            readOnly: true
            example: "strobe"
      tags:
        - entities
      summary: Get Entity Photos
      operationId: getEntityPhotosBySlug
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Photos"
  /api/entities/{id}/photos:
    post:
      parameters:
        - name: id
          description: The unique identifier of the entity
          in: path
          required: true
          schema:
            type: integer
            readOnly: true
            example: 1
      tags:
        - entities
      summary: Add Entity Photo
      operationId: addEntityPhotoById
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        "201":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PhotoResponse"
  /api/entities/{slug}/follow:
    post:
      parameters:
        - name: slug
          description: The unique identifier of the entity
          in: path
          required: true
          schema:
            type: string
            readOnly: true
            example: "strobe"
      tags:
        - entities
      summary: Follow Entity
      operationId: followEntityBySlug
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityResponse"
  /api/entities/{slug}/unfollow:
    post:
      parameters:
        - name: slug
          description: The unique identifier of the entity
          in: path
          required: true
          schema:
            type: string
            readOnly: true
            example: "strobe"
      tags:
        - entities
      summary: Unfollow Entity
      operationId: unfollowEntityBySlug
      responses:
        "204":
          description: Successful response
          content:
            application/json: {}
  /api/entity-statuses:
    get:
      tags:
        - entity-statuses
      summary: Get Entity Statuses
      operationId: getEntityStatuses
      parameters:
        - name: filters[name]
          in: query
          required: false
          description: A filter query of the entity status name
          schema:
            type: string
            example: "Group"
        - name: limit
          in: query
          required: false
          description: The limit on the number of results to return per page
          schema:
            type: integer
            example: 25
        - name: page
          in: query
          required: false
          description: The page number to return
          schema:
            type: integer
            example: 1
        - name: sort
          in: query
          required: false
          description: A column to be used to sort the query
          schema:
            type: string
            example: name
        - name: direction
          in: query
          required: false
          description: A string indicating the sort direction of the query (asc or desc)
          schema:
            type: string
            example: asc
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pagination"
    post:
      tags:
        - entity-statuses
      summary: Create entity status
      operationId: createEntityStatus
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EntityStatusRequest"
      responses:
        "201":
          description: Successful response
          content:
            application/json: {}
  /api/entity-statuses/{entityStatusId}:
    get:
      parameters:
        - name: entityStatusId
          description: The unique identifier of the entity status
          in: path
          required: true
          schema:
            description: The unique identifier of an entity type
            type: integer
            readOnly: true
            example: 1
      tags:
        - entity-statuses
      summary: Get EntityStatus
      operationId: getEntityStatusById
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityStatusResponse"
    put:
      parameters:
        - name: entityStatusId
          description: The unique identifier of the entity status
          in: path
          required: true
          schema:
            description: The unique identifier of an entity type
            type: integer
            readOnly: true
            example: 1
      tags:
        - entity-statuses
      summary: Update Entity Status
      operationId: updateEntityStatusById
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EntityStatusRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityStatusResponse"
    delete:
      parameters:
        - name: entityStatusId
          description: The unique identifier of the entity status
          in: path
          required: true
          schema:
            description: The unique identifier of an entity type
            type: integer
            readOnly: true
            example: 1
      tags:
        - entity-statuses
      summary: Delete Entity Status
      operationId: deleteEntityStatusById
      responses:
        "204":
          description: Successful response
          content:
            application/json: {}
  /api/entity-types:
    get:
      tags:
        - entity-types
      summary: Get Entity Types
      operationId: getEntityTypes
      parameters:
        - name: filters[name]
          in: query
          required: false
          description: A filter query of the entity status name
          schema:
            type: string
            example: "Group"
        - name: limit
          in: query
          required: false
          description: The limit on the number of results to return per page
          schema:
            type: integer
            example: 25
        - name: page
          in: query
          required: false
          description: The page number to return
          schema:
            type: integer
            example: 1
        - name: sort
          in: query
          required: false
          description: A column to be used to sort the query
          schema:
            type: string
            example: name
        - name: direction
          in: query
          required: false
          description: A string indicating the sort direction of the query (asc or desc)
          schema:
            type: string
            example: asc
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pagination"
    post:
      tags:
        - entity-types
      summary: Create entity type
      operationId: createEntityType
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EntityTypeRequest"
      responses:
        "201":
          description: Successful response
          content:
            application/json: {}
  /api/entity-types/{entityTypeId}:
    parameters:
      - name: entityTypeId
        description: The unique identifier of the entity type
        in: path
        required: true
        schema:
          type: integer
          readOnly: true
          example: 1
    get:
      tags:
        - entity-types
      summary: Get EntityType
      operationId: getEntityTypeById
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityTypeResponse"
    put:
      tags:
        - entity-types
      summary: Update Entity Type
      operationId: updateEntityTypeById
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EntityTypeRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityTypeResponse"
    delete:
      tags:
        - entity-types
      summary: Delete Entity Type
      operationId: deleteEntityTypeById
      responses:
        "204":
          description: Successful response
          content:
            application/json: {}
  /api/event-types:
    get:
      tags:
        - event-types
      summary: Get Event Types
      operationId: updateEventTypes
      parameters:
        - name: filters[name]
          in: query
          required: false
          description: A filter query of the event status name
          schema:
            type: string
            example: "Concert"
        - name: limit
          in: query
          required: false
          description: The limit on the number of results to return per page
          schema:
            type: integer
            example: 25
        - name: page
          in: query
          required: false
          description: The page number to return
          schema:
            type: integer
            example: 1
        - name: sort
          in: query
          required: false
          description: A column to be used to sort the query
          schema:
            type: string
            example: name
        - name: direction
          in: query
          required: false
          description: A string indicating the sort direction of the query (asc or desc)
          schema:
            type: string
            example: asc
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EventTypes"
    post:
      tags:
        - event-types
      summary: Create event type
      operationId: createEventType
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EventTypeRequest"
      responses:
        "201":
          description: Successful response
          content:
            application/json: {}
  /api/event-types/{eventTypeId}:
    parameters:
      - name: eventTypeId
        description: The unique identifier of the event type
        in: path
        required: true
        schema:
          type: integer
          readOnly: true
          example: 1
    get:
      tags:
        - event-types
      summary: Get EventType
      operationId: getEventTypeById
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EventTypeResponse"
    put:
      tags:
        - event-types
      summary: Update Event Type
      operationId: updateEventTypeById
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EventTypeRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EventTypeResponse"
    delete:
      tags:
        - event-types
      summary: Delete Event Type
      operationId: deleteEventTypeById
      responses:
        "204":
          description: Successful response
          content:
            application/json: {}
  /api/event-statuses:
    get:
      tags:
        - event-statuses
      summary: Get Event Statuses
      operationId: getEventStatuses
      parameters:
        - name: filters[name]
          in: query
          required: false
          description: A filter query of the event status name
          schema:
            type: string
            example: "Draft"
        - name: limit
          in: query
          required: false
          description: The limit on the number of results to return per page
          schema:
            type: integer
            example: 25
        - name: page
          in: query
          required: false
          description: The page number to return
          schema:
            type: integer
            example: 1
        - name: sort
          in: query
          required: false
          description: A column to be used to sort the query
          schema:
            type: string
            example: name
        - name: direction
          in: query
          required: false
          description: A string indicating the sort direction of the query (asc or desc)
          schema:
            type: string
            example: asc
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pagination"
    post:
      tags:
        - event-statuses
      summary: Create event status
      operationId: createEventStatus
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EventStatusRequest"
      responses:
        "201":
          description: Successful response
          content:
            application/json: {}
  /api/event-statuses/{eventStatusId}:
    get:
      parameters:
        - name: eventStatusId
          description: The unique identifier of the event status
          in: path
          required: true
          schema:
            description: The unique identifier of an event status
            type: integer
            readOnly: true
            example: 1
      tags:
        - event-statuses
      summary: Get EventStatus
      operationId: getEventStatusById
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EventStatusResponse"
    put:
      parameters:
        - name: eventStatusId
          description: The unique identifier of the event status
          in: path
          required: true
          schema:
            description: The unique identifier of an event status
            type: integer
            readOnly: true
            example: 1
      tags:
        - event-statuses
      summary: Update Event Status
      operationId: updateEventStatusById
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EventStatusRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EventStatusResponse"
    delete:
      parameters:
        - name: eventStatusId
          description: The unique identifier of the event status
          in: path
          required: true
          schema:
            description: The unique identifier of an event status
            type: integer
            readOnly: true
            example: 1
      tags:
        - event-statuses
      summary: Delete Event Status
      operationId: deleteEventStatusById
      responses:
        "204":
          description: Successful response
          content:
            application/json: {}
  /api/forums:
    get:
      tags:
        - forums
      summary: Get Forums
      operationId: getForums
      parameters:
        - name: filters[name]
          in: query
          required: false
          description: A filter query of the forum name
          schema:
            type: string
            example: Blog Title
        - name: limit
          in: query
          required: false
          description: The limit on the number of results to return per page
          schema:
            type: integer
            example: 25
        - name: page
          in: query
          required: false
          description: The page number to return
          schema:
            type: integer
            example: 1
        - name: sort
          in: query
          required: false
          description: A column to be used to sort the query
          schema:
            type: string
            example: name
        - name: direction
          in: query
          required: false
          description: A string indicating the sort direction of the query (asc or desc)
          schema:
            type: string
            example: asc
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Forums"
    post:
      tags:
        - forums
      summary: Create forum
      operationId: createForum
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Forum"
      responses:
        "201":
          description: Successful response
          content:
            application/json: {}
  /api/forums/{forumId}:
    get:
      parameters:
        - name: forumId
          description: The unique identifier of the forum
          in: path
          required: true
          schema:
            description: The unique identifier of a forum
            type: integer
            readOnly: true
            example: 1
      tags:
        - forums
      summary: Get Forum
      operationId: getForumId
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Forum"
    put:
      parameters:
        - name: forumId
          description: The unique identifier of the forum
          in: path
          required: true
          schema:
            description: The unique identifier of a forum
            type: integer
            readOnly: true
            example: 1
      tags:
        - forums
      summary: Update Forum
      operationId: updateForumById
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Forum"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Forum"
    delete:
      parameters:
        - name: forumId
          description: The unique identifier of the forum
          in: path
          required: true
          schema:
            description: The unique identifier of a forum
            type: integer
            readOnly: true
            example: 1
      tags:
        - forums
      summary: Delete Forum
      operationId: deleteForumById
      responses:
        "204":
          description: Successful response
          content:
            application/json: {}
  /api/links:
    get:
      tags:
        - links
      summary: Get Links
      operationId: getLinks
      parameters:
        - name: title
          in: query
          schema:
            type: string
            example: "Google"
        - name: limit
          in: query
          required: false
          description: The limit on the number of results to return per page
          schema:
            type: integer
          example: 25
        - name: page
          in: query
          required: false
          description: The page number to return
          schema:
            type: integer
            example: 1
        - name: sort
          in: query
          required: false
          description: A column to be used to sort the query
          schema:
            type: string
            example: name
        - name: direction
          in: query
          required: false
          description: A string indicating the sort direction of the query (asc or desc)
          schema:
            type: string
            example: asc
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Links"
    post:
      tags:
        - links
      summary: Create link
      operationId: createLink
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Link"
      responses:
        "201":
          description: Successful response
          content:
            application/json: {}
  /api/links/{linkId}:
    parameters:
      - name: linkId
        description: The unique identifier of the link
        in: path
        required: true
        schema:
          type: integer
          readOnly: true
          example: 1
    get:
      tags:
        - links
      summary: Get Link
      operationId: getLinkById
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Link"
    put:
      tags:
        - links
      summary: Update link
      operationId: updateLinkById
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Link"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Link"
    delete:
      tags:
        - links
      summary: Delete Link
      operationId: deleteLinkById
      responses:
        "204":
          description: Successful response
          content:
            application/json: {}
  /api/menus:
    get:
      tags:
        - menus
      summary: Get Menus
      operationId: getMenus
      parameters:
        - name: limit
          in: query
          required: false
          description: The limit on the number of results to return per page
          schema:
            type: integer
          example: 25
        - name: page
          in: query
          required: false
          description: The page number to return
          schema:
            type: integer
            example: 1
        - name: sort
          in: query
          required: false
          description: A column to be used to sort the query
          schema:
            type: string
            example: name
        - name: direction
          in: query
          required: false
          description: A string indicating the sort direction of the query (asc or desc)
          schema:
            type: string
            example: asc
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Menus"
    post:
      tags:
        - menus
      summary: Create menu
      operationId: createMenu
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Menu"
      responses:
        "201":
          description: Successful response
          content:
            application/json: {}
  /api/menus/{menuId}:
    parameters:
      - name: menuId
        description: The unique identifier of the menu
        in: path
        required: true
        schema:
          type: integer
          readOnly: true
          example: 1
    get:
      tags:
        - menus
      summary: Get Menu
      operationId: getMenuById
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Menu"
    patch:
      tags:
        - menus
      summary: Update menu
      operationId: updateMenuById
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Menu"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Menu"
    delete:
      tags:
        - menus
      summary: Delete Menu
      operationId: deleteMenuById
      responses:
        "204":
          description: Successful response
          content:
            application/json: {}
  /api/locations:
    get:
      tags:
        - locations
      summary: Get Locations
      operationId: getLocations
      parameters:
        - name: name
          in: query
          schema:
            type: string
            example: "Brillobox"
        - name: limit
          in: query
          required: false
          description: The limit on the number of results to return per page
          schema:
            type: integer
            example: 25
        - name: page
          in: query
          required: false
          description: The page number to return
          schema:
            type: integer
            example: 1
        - name: sort
          in: query
          required: false
          description: A column to be used to sort the query
          schema:
            type: string
            example: name
        - name: direction
          in: query
          required: false
          description: A string indicating the sort direction of the query (asc or desc)
          schema:
            type: string
            example: asc
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Location"
    post:
      tags:
        - locations
      summary: Create location
      operationId: createLocation
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LocationRequest"
      responses:
        "201":
          description: Successful response
          content:
            application/json: {}
  /api/locations/{locationId}:
    parameters:
      - name: locationId
        description: The unique identifier of the location
        in: path
        required: true
        schema:
          type: integer
          readOnly: true
          example: 1
    get:
      tags:
        - locations
      summary: Get Location
      operationId: getLocationById
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Location"
    put:
      tags:
        - locations
      summary: Update location
      operationId: updateLocationById
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LocationRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Location"
    delete:
      tags:
        - locations
      summary: Delete Location
      operationId: deleteLocationById
      responses:
        "204":
          description: Successful response
          content:
            application/json: {}
  /api/posts:
    get:
      tags:
        - posts
      summary: Get Posts
      operationId: getPosts
      parameters:
        - name: filters[name]
          in: query
          required: false
          description: A filter query of the post name
          schema:
            type: string
            example: Post name
        - name: limit
          in: query
          required: false
          description: The limit on the number of results to return per page
          schema:
            type: integer
            example: 25
        - name: page
          in: query
          required: false
          description: The page number to return
          schema:
            type: integer
            example: 1
        - name: sort
          in: query
          required: false
          description: A column to be used to sort the query
          schema:
            type: string
            example: name
        - name: direction
          in: query
          required: false
          description: A string indicating the sort direction of the query (asc or desc)
          schema:
            type: string
            example: asc
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Posts"
  /api/series:
    post:
      tags:
        - series
      summary: Create Series
      operationId: createSeries
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SeriesRequest"
      responses:
        "201":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SeriesResponse"
    get:
      tags:
        - series
      summary: Get Series by filters
      operationId: geSeries
      parameters:
        - name: filters[name]
          in: query
          required: false
          description: A filter query of series name
          schema:
            type: string
            example: "Lazercrunk"
        - name: filters[event_type]
          in: query
          required: false
          description: A filter query of related event type name
          schema:
            type: string
            example: "Concert"
        - name: filters[venue]
          in: query
          required: false
          description: A filter query of the venue name
          schema:
            type: string
            example: "Brillobox"
        - name: filters[promoter]
          in: query
          required: false
          description: A filter query of the promoter name
          schema:
            type: string
            example: "Cutups"
        - name: filters[related]
          in: query
          required: false
          description: A filter query of related entity name
          schema:
            type: string
            example: "0h85"
        - name: filters[occurrence_type]
          in: query
          required: false
          description: A filter query of related occurrence type name
          schema:
            type: string
            example: "Monthly"
        - name: filters[occurrence_week]
          in: query
          required: false
          description: A filter query of related occurrence week name
          schema:
            type: string
            example: "First"
        - name: filters[occurrence_day]
          in: query
          required: false
          description: A filter query of related occurrence day name
          schema:
            type: string
            example: "Friday"
        - name: filters[start_at][start]
          in: query
          required: false
          description: A filter query of the start time starting
          schema:
            type: string
            example: "2022-01-01 1:00:00"
        - name: filters[start_at][end]
          in: query
          required: false
          description: A filter query of the start time ending
          schema:
            type: string
            example: "2022-02-01 2:00:00"
        - name: filters[end_at][start]
          in: query
          required: false
          description: A filter query of the end time starting
          schema:
            type: string
            example: "2022-02-01 1:00:00"
        - name: filters[end_at][end]
          in: query
          required: false
          description: A filter query of the end time ending
          schema:
            type: string
            example: "2022-01-01 2:00:00"
        - name: filters[ages]
          in: query
          required: false
          description: A filter query of the end time ending
          schema:
            type: integer
            example: 21
        - name: limit
          in: query
          required: false
          description: The limit on the number of results to return per page
          schema:
            type: integer
            example: 25
        - name: page
          in: query
          required: false
          description: The page number to return
          schema:
            type: integer
            example: 1
        - name: sort
          in: query
          required: false
          description: A column to be used to sort the query
          schema:
            type: string
            example: name
        - name: direction
          in: query
          required: false
          description: A string indicating the sort direction of the query (asc or desc)
          schema:
            type: string
          example: asc
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Seriess"
  /api/series/{slug}:
    parameters:
      - name: slug
        description: The unique identifier of the series
        in: path
        required: true
        schema:
          type: string
          readOnly: true
          example: 1
    get:
      tags:
        - series
      summary: Get one Series
      operationId: getSeriesBySlug
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SeriesResponse"
    put:
      tags:
        - series
      summary: Update Series
      operationId: updateSeriesById
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SeriesRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SeriesResponse"
    delete:
      tags:
        - series
      summary: Delete Series
      operationId: deleteSeriesById
      responses:
        "204":
          description: Successful response
          content:
            application/json: {}
  /api/series/{slug}/all-photos:
    get:
      parameters:
        - name: slug
          description: The unique identifier of the series
          in: path
          required: true
          schema:
            type: string
            readOnly: true
            example: "strobe"
      tags:
        - series
      summary: Get All Related Series Photos
      operationId: getAllSeriesPhotosBySlug
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Photos"
  /api/series/{id}/photos:
    post:
      parameters:
        - name: id
          description: The unique identifier of the series
          in: path
          required: true
          schema:
            type: integer
            readOnly: true
            example: 1
      tags:
        - series
      summary: Add Series Photo
      operationId: addSeriesPhotoById
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        "201":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PhotoResponse"
  /api/series/{slug}/follow:
    post:
      parameters:
        - name: slug
          description: The unique identifier of the series
          in: path
          required: true
          schema:
            type: string
            readOnly: true
            example: "strobe"
      tags:
        - series
      summary: Follow Series
      operationId: followSeriesBySlug
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SeriesResponse"
  /api/series/{slug}/unfollow:
    post:
      parameters:
        - name: slug
          description: The unique identifier of the series
          in: path
          required: true
          schema:
            type: string
            readOnly: true
            example: "strobe"
      tags:
        - series
      summary: Unfollow Series
      operationId: unfollowSeriesBySlug
      responses:
        "204":
          description: Successful response
          content:
            application/json: {}
  /api/tags/{slug}/follow:
    post:
      parameters:
        - name: slug
          description: The unique identifier of the tag
          in: path
          required: true
          schema:
            type: string
            readOnly: true
            example: "strobe"
      tags:
        - tags
      summary: Follow Tag
      operationId: followTagBySlug
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tag"
  /api/tags/{slug}/unfollow:
    post:
      parameters:
        - name: slug
          description: The unique identifier of the tag
          in: path
          required: true
          schema:
            type: string
            readOnly: true
            example: "strobe"
      tags:
        - tags
      summary: Unfollow Tag
      operationId: unfollowTagBySlug
      responses:
        "204":
          description: Successful response
          content:
            application/json: {}
  /api/tags:
    post:
      tags:
        - tags
      summary: Create Tag
      operationId: createTag
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Tag"
      responses:
        "201":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tag"
    get:
      tags:
        - tags
      summary: Get Tags
      operationId: getTags
      parameters:
        - name: filters[name]
          in: query
          schema:
            type: string
            example: "techno"
        - name: limit
          in: query
          required: false
          description: The limit on the number of results to return per page
          schema:
            type: integer
            example: 25
        - name: page
          in: query
          required: false
          description: The page number to return
          schema:
            type: integer
            example: 1
        - name: sort
          in: query
          required: false
          description: A column to be used to sort the query
          schema:
            type: string
            example: name
        - name: direction
          in: query
          required: false
          description: A string indicating the sort direction of the query (asc or desc)
          schema:
            type: string
            example: asc
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tags"
  /api/tags/{tagId}:
    parameters:
      - name: tagId
        description: The unique identifier of the tag
        in: path
        required: true
        schema:
          type: integer
          readOnly: true
          example: 1
    get:
      tags:
        - tags
      summary: Get one Tag
      operationId: getTagById
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tag"
    put:
      tags:
        - tags
      summary: Update Tag
      operationId: updateTagById
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Tag"
      responses:
        "200":
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - tags
      summary: Delete Tag
      operationId: deleteTagById
      responses:
        "204":
          description: Successful response
          content:
            application/json: {}
  /api/threads:
    get:
      tags:
        - threads
      summary: Get Threads
      operationId: getThreads
      parameters:
        - name: filters[name]
          in: query
          required: false
          description: A filter query of the thread name
          schema:
            type: string
            example: Thread name
        - name: limit
          in: query
          required: false
          description: The limit on the number of results to return per page
          schema:
            type: integer
            example: 25
        - name: page
          in: query
          required: false
          description: The page number to return
          schema:
            type: integer
            example: 1
        - name: sort
          in: query
          required: false
          description: A column to be used to sort the query
          schema:
            type: string
            example: name
        - name: direction
          in: query
          required: false
          description: A string indicating the sort direction of the query (asc or desc)
          schema:
            type: string
            example: asc
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Threads"
    post:
      tags:
        - threads
      summary: Create thread
      operationId: createThread
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Thread"
      responses:
        "201":
          description: Successful response
          content:
            application/json: {}
  /api/threads/{threadId}:
    get:
      parameters:
        - name: threadId
          description: The unique identifier of the thread
          in: path
          required: true
          schema:
            description: The unique identifier of a thread
            type: integer
            readOnly: true
            example: 1
      tags:
        - threads
      summary: Get Thread
      operationId: getThreadId
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Thread"
    put:
      parameters:
        - name: threadId
          description: The unique identifier of the thread
          in: path
          required: true
          schema:
            description: The unique identifier of a thread
            type: integer
            readOnly: true
            example: 1
      tags:
        - threads
      summary: Update Thread
      operationId: updateThreadById
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Thread"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Thread"
    delete:
      parameters:
        - name: threadId
          description: The unique identifier of the thread
          in: path
          required: true
          schema:
            description: The unique identifier of a thread
            type: integer
            readOnly: true
            example: 1
      tags:
        - threads
      summary: Delete Thread
      operationId: deleteThreadById
      responses:
        "204":
          description: Successful response
          content:
            application/json: {}
  /api/threads/{threadId}/posts:
    get:
      parameters:
        - name: threadId
          description: The unique identifier of the thread
          in: path
          required: true
          schema:
            description: The unique identifier of a thread
            type: integer
            readOnly: true
            example: 1
      tags:
        - threads
      summary: Get Posts in Thread
      operationId: getPostsInThreadById
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Posts"
  /api/threads/{threadId}/posts/{postId}:
    parameters:
      - name: threadId
        description: The unique identifier of the thread
        in: path
        required: true
        schema:
          type: integer
          readOnly: true
          example: 1
      - name: postId
        description: The unique identifier of the post in the thread
        in: path
        required: true
        schema:
          type: integer
          readOnly: true
          example: 1
    get:
      parameters:
        - name: threadId
          description: The unique identifier of the thread
          in: path
          required: true
          schema:
            description: The unique identifier of a thread
            type: integer
            readOnly: true
            example: 1
      tags:
        - threads
      summary: Get Post in Thread
      operationId: getPostInThreadById
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
  /api/tokens/create:
    post:
      tags:
        - users
      summary: Create User Bearer Token
      operationId: createUserBearerToken
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserTokenRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserTokenResponse"
  /api/tokens/validate:
    get:
      tags:
        - users
      summary: Validate User Token
      operationId: validateUserToken
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: string
                    description: Valid user token
                    example: ABCDEF12345
  /api/auth/me:
    get:
      tags:
        - users
      summary: Get Authenticated User
      operationId: getAuthenticatedUser
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
  /api/roles:
    get:
      tags:
        - roles
      summary: Get Roles
      operationId: getRoles
      parameters:
        - name: filters[name]
          in: query
          required: false
          description: A filter query of the role name
          schema:
            type: string
            example: "dj"
        - name: limit
          in: query
          required: false
          description: The limit on the number of results to return per page
          schema:
            type: integer
            example: 25
        - name: page
          in: query
          required: false
          description: The page number to return
          schema:
            type: integer
            example: 1
        - name: sort
          in: query
          required: false
          description: A column to be used to sort the query
          schema:
            type: string
            example: name
        - name: direction
          in: query
          required: false
          description: A string indicating the sort direction of the query (asc or desc)
          schema:
            type: string
            example: asc
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Roles"
    post:
      tags:
        - roles
      summary: Create Role
      operationId: createRole
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RoleRequest"
      responses:
        "201":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Role"
  /api/roles/{roleId}:
    parameters:
      - name: roleId
        description: The unique identifier of the role
        in: path
        required: true
        schema:
          type: integer
          readOnly: true
          example: 1
    get:
      tags:
        - roles
      summary: Get Role
      operationId: getRoleById
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Role"
    put:
      tags:
        - roles
      summary: Update Role
      operationId: updateRoleById
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RoleRequest"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Role"
    delete:
      tags:
        - roles
      summary: Delete Role
      operationId: deleteRoleById
      responses:
        "204":
          description: Successful response
          content:
            application/json: {}
  /api/users:
    post:
      tags:
        - users
      summary: Create User
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRequest"
      responses:
        "201":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
    get:
      tags:
        - users
      summary: Get Users
      operationId: getUsers
      parameters:
        - name: filters[status]
          in: query
          required: false
          description: A filter query of the user status
          schema:
            type: string
            example: Active
        - name: filters[name]
          in: query
          required: false
          description: A filter query of the user name
          schema:
            type: string
            example: Geoff
        - name: filters[email]
          in: query
          required: false
          description: A filter query of the user email
          schema:
            type: string
            example: geoff.maddock@gmail.com
        - name: limit
          in: query
          required: false
          description: The limit on the number of results to return per page
          schema:
            type: integer
            example: 25
        - name: page
          in: query
          required: false
          description: The page number to return
          schema:
            type: integer
            example: 1
        - name: sort
          in: query
          required: false
          description: A column to be used to sort the query
          schema:
            type: string
            example: name
        - name: direction
          in: query
          required: false
          description: A string indicating the sort direction of the query (asc or desc)
          schema:
            type: string
            example: asc
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Users"
  /api/users/{userId}:
    parameters:
      - name: userId
        description: The unique identifier of the user
        in: path
        required: true
        schema:
          type: integer
          readOnly: true
          example: 1
    get:
      tags:
        - users
      summary: Get one User by id
      operationId: getUserById
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
    put:
      tags:
        - users
      summary: Update User
      operationId: updateUserById
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
    delete:
      tags:
        - users
      summary: Delete User
      operationId: deleteUserById
      responses:
        "204":
          description: Successful response
          content:
            application/json: {}
  /api/users/{userId}/events-attending:
    get:
      parameters:
        - name: userId
          description: The unique identifier of the user
          in: path
          required: true
          schema:
            type: integer
            readOnly: true
            example: 1
        - name: filters[name]
          in: query
          required: false
          description: A filter query of the event name
          schema:
            type: string
            example: "Lazercrunk"
        - name: filters[venue]
          in: query
          required: false
          description: A filter query of the venue name
          schema:
            type: string
            example: "Brillobox"
        - name: filters[promoter]
          in: query
          required: false
          description: A filter query of the promoter name
          schema:
            type: string
            example: "Cutups"
        - name: filters[related]
          in: query
          required: false
          description: A filter query of related entity name
          schema:
            type: string
            example: "0h85"
        - name: filters[series]
          in: query
          required: false
          description: A filter query of related series name
          schema:
            type: string
            example: "Lazercrunk"
        - name: filters[event_type]
          in: query
          required: false
          description: A filter query of related event type name
          schema:
            type: string
            example: "Concert"
        - name: filters[start_at][start]
          in: query
          required: false
          description: A filter query of the start time starting
          schema:
            type: string
            example: "2022-01-01 1:00:00"
        - name: filters[start_at][end]
          in: query
          required: false
          description: A filter query of the start time ending
          schema:
            type: string
            example: "2022-02-01 2:00:00"
        - name: filters[end_at][start]
          in: query
          required: false
          description: A filter query of the end time starting
          schema:
            type: string
            example: "2022-02-01 1:00:00"
        - name: filters[end_at][end]
          in: query
          required: false
          description: A filter query of the end time ending
          schema:
            type: string
            example: "2022-01-01 2:00:00"
        - name: filters[ages]
          in: query
          required: false
          description: A filter query of the end time ending
          schema:
            type: integer
            example: 21
        - name: filters[tag]
          in: query
          required: false
          description: A filter query of the event tags
          schema:
            type: string
            example: "electronic"
        - name: limit
          in: query
          required: false
          description: The limit on the number of results to return per page
          schema:
            type: integer
            example: 25
        - name: page
          in: query
          required: false
          description: The page number to return
          schema:
            type: integer
            example: 1
        - name: sort
          in: query
          required: false
          description: A column to be used to sort the query
          schema:
            type: string
            example: name
        - name: direction
          in: query
          required: false
          description: A string indicating the sort direction of the query (asc or desc)
          schema:
            type: string
            example: asc
      tags:
        - users
      summary: Get Events the User is Attending
      operationId: getUserAttendingEvents
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Events"
  /api/photos/{photoId}/set-primary:
    post:
      parameters:
        - name: photoId
          description: The unique identifier of the photo
          in: path
          required: true
          schema:
            type: integer
            readOnly: true
            example: 1
      tags:
        - photos
      summary: Set Photo Primary
      operationId: setPhotoPrimary
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PhotoResponse"
  /api/photos/{photoId}/unset-primary:
    post:
      parameters:
        - name: photoId
          description: The unique identifier of the photo
          in: path
          required: true
          schema:
            type: integer
            readOnly: true
            example: 1
      tags:
        - photos
      summary: Unset Photo Primary
      operationId: unsetPhotoPrimary
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PhotoResponse"
  /api/photos/{photoId}:
    delete:
      parameters:
        - name: photoId
          description: The unique identifier of the photo
          in: path
          required: true
          schema:
            type: integer
            readOnly: true
            example: 1
      tags:
        - photos
      summary: Delete Photo
      operationId: deletePhoto
      responses:
        "204":
          description: Successful response
          content:
            application/json: {}
  /api/visibilities:
    get:
      tags:
        - visibilities
      summary: Get Visibilities
      operationId: getVisibilities
      parameters:
        - name: filters[name]
          in: query
          required: false
          description: A filter query of the visibility name
          schema:
            type: string
            example: Public
        - name: limit
          in: query
          required: false
          description: The limit on the number of results to return per page
          schema:
            type: integer
            example: 25
        - name: page
          in: query
          required: false
          description: The page number to return
          schema:
            type: integer
            example: 1
        - name: sort
          in: query
          required: false
          description: A column to be used to sort the query
          schema:
            type: string
            example: name
        - name: direction
          in: query
          required: false
          description: A string indicating the sort direction of the query (asc or desc)
          schema:
            type: string
            example: asc
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Visibilities"
  /api/visibilities/{visibilityId}:
    parameters:
      - name: visibilityId
        description: The unique identifier of the visibility
        in: path
        required: true
        schema:
          type: integer
          readOnly: true
          example: 1
    get:
      tags:
        - visibilities
      summary: Get Visibility
      operationId: getVisibilityById
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
        $ref: "#/components/schemas/Visibility"
  /api/occurrence-types:
    get:
      tags:
        - occurrence-types
      summary: Get Occurrence Types
      operationId: getOccurrenceTypes
      parameters:
        - name: filters[name]
          in: query
          required: false
          description: A filter query of the occurrence type name
          schema:
            type: string
            example: Weekly
        - name: limit
          in: query
          required: false
          description: The limit on the number of results to return per page
          schema:
            type: integer
            example: 25
        - name: page
          in: query
          required: false
          description: The page number to return
          schema:
            type: integer
            example: 1
        - name: sort
          in: query
          required: false
          description: A column to be used to sort the query
          schema:
            type: string
            example: name
        - name: direction
          in: query
          required: false
          description: A string indicating the sort direction of the query (asc or desc)
          schema:
            type: string
            example: asc
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OccurrenceTypes"
  /api/occurrence-types/{occurrenceTypeId}:
    parameters:
      - name: occurrenceTypeId
        description: The unique identifier of the occurrence type
        in: path
        required: true
        schema:
          type: integer
          readOnly: true
          example: 1
    get:
      tags:
        - occurrence-types
      summary: Get Occurrence Type
      operationId: getOccurrenceTypeById
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OccurrenceType"
  /api/occurrence-weeks:
    get:
      tags:
        - occurrence-weeks
      summary: Get Occurrence Weeks
      operationId: getOccurrenceWeeks
      parameters:
        - name: filters[name]
          in: query
          required: false
          description: A filter query of the occurrence week name
          schema:
            type: string
            example: First
        - name: limit
          in: query
          required: false
          description: The limit on the number of results to return per page
          schema:
            type: integer
            example: 25
        - name: page
          in: query
          required: false
          description: The page number to return
          schema:
            type: integer
            example: 1
        - name: sort
          in: query
          required: false
          description: A column to be used to sort the query
          schema:
            type: string
            example: name
        - name: direction
          in: query
          required: false
          description: A string indicating the sort direction of the query (asc or desc)
          schema:
            type: string
            example: asc
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OccurrenceWeeks"
  /api/occurrence-weeks/{occurrenceWeekId}:
    parameters:
      - name: occurrenceWeekId
        description: The unique identifier of the occurrence week
        in: path
        required: true
        schema:
          type: integer
          readOnly: true
          example: 1
    get:
      tags:
        - occurrence-weeks
      summary: Get Occurrence Week
      operationId: getOccurrenceWeekById
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OccurrenceWeek"
  /api/occurrence-days:
    get:
      tags:
        - occurrence-days
      summary: Get Occurrence Days
      operationId: getOccurrenceDays
      parameters:
        - name: filters[name]
          in: query
          required: false
          description: A filter query of the occurrence day name
          schema:
            type: string
            example: Monday
        - name: limit
          in: query
          required: false
          description: The limit on the number of results to return per page
          schema:
            type: integer
            example: 25
        - name: page
          in: query
          required: false
          description: The page number to return
          schema:
            type: integer
            example: 1
        - name: sort
          in: query
          required: false
          description: A column to be used to sort the query
          schema:
            type: string
            example: name
        - name: direction
          in: query
          required: false
          description: A string indicating the sort direction of the query (asc or desc)
          schema:
            type: string
            example: asc
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OccurrenceDays"
  /api/occurrence-days/{occurrenceDayId}:
    parameters:
      - name: occurrenceDayId
        description: The unique identifier of the occurrence day
        in: path
        required: true
        schema:
          type: integer
          readOnly: true
          example: 1
    get:
      tags:
        - occurrence-days
      summary: Get Occurrence Day
      operationId: getOccurrenceDayById
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OccurrenceDay"
